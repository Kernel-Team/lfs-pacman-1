pkgbase=clang-runtime
pkgname=('compiler-rt' 'libcxx' 'lib32-libcxx' 'openmp' 'lib32-openmp')
_realver=8.0.0
_fullver=${_realver/rc*/}
_pre_release=0
pkgver=${_realver/rc/.rc}
pkgrel=1
arch=('x86_64')
url="http://www.llvm.org/"
license=('custom')
#depends=()

if [ "${_pre_release}" -eq "1" ]
then
	_url="http://prereleases.llvm.org/${pkgver/.rc/\/rc}"
else
	_url="http://releases.llvm.org/${pkgver}"
fi

source=("${_url}/llvm-${_realver}.src.tar.xz"
	"${_url}/cfe-${_realver}.src.tar.xz"
	"${_url}/compiler-rt-${_realver}.src.tar.xz"
	"${_url}/libcxx-${_realver}.src.tar.xz"
	"${_url}/libcxxabi-${_realver}.src.tar.xz"
	"${_url}/libunwind-${_realver}.src.tar.xz"
	"${_url}/openmp-${_realver}.src.tar.xz"
	"crtbegin-i386.S::http://ftp.netbsd.org/pub/NetBSD/NetBSD-current/src/lib/csu/arch/i386/crtbegin.S"
	"crtbegin-x86_64.S::http://ftp.netbsd.org/pub/NetBSD/NetBSD-current/src/lib/csu/arch/x86_64/crtbegin.S"
	"crtend-i386.S::http://ftp.netbsd.org/pub/NetBSD/NetBSD-current/src/lib/csu/arch/i386/crtend.S"
	"crtend-x86_64.S::http://ftp.netbsd.org/pub/NetBSD/NetBSD-current/src/lib/csu/arch/x86_64/crtend.S"
	"crtfastmath.c")

prepare() {
	cp "${srcdir}/crtfastmath.c" "${srcdir}/crtfastmath-i386.c"
	cp "${srcdir}/crtfastmath.c" "${srcdir}/crtfastmath-x86_64.c"

	sed -i "/asm.h/d;/RCSID/d" "${srcdir}"/crtbegin-{i386,x86_64}.S
	sed -i "/asm.h/d;/RCSID/d" "${srcdir}"/crtend-{i386,x86_64}.S

	cd "${srcdir}/openmp-${_realver}.src"

	sed -i "/OpenMPTesting/d;/construct_check_openmp_target/d" CMakeLists.txt
	sed -i "/add_openmp_testsuite/d" runtime/test/CMakeLists.txt
	sed -i "/add_subdirectory(test)/d" libomptarget/CMakeLists.txt

	rm -rf "${srcdir}"/llvm-${_realver}.src/projects/{compiler-rt,libcxx,libcxxabi,libunwind,openmp}

	mv -v "${srcdir}/compiler-rt-${_realver}.src" "${srcdir}/llvm-${_realver}.src/projects/compiler-rt"
	mv -v "${srcdir}/libcxx-${_realver}.src" "${srcdir}/llvm-${_realver}.src/projects/libcxx"
	mv -v "${srcdir}/libcxxabi-${_realver}.src" "${srcdir}/llvm-${_realver}.src/projects/libcxxabi"
	mv -v "${srcdir}/libunwind-${_realver}.src" "${srcdir}/llvm-${_realver}.src/projects/libunwind"
	mv -v "${srcdir}/openmp-${_realver}.src" "${srcdir}/llvm-${_realver}.src/projects/openmp"

	rm -rf "${srcdir}/llvm-${_realver}.src/tools/clang"

	mv -v "${srcdir}/cfe-${_realver}.src" "${srcdir}/llvm-${_realver}.src/tools/clang"

	rm -rf "${srcdir}/llvm32-${_realver}.src"
	cp -a "${srcdir}"/llvm{,32}-${_realver}.src

	rm -rf "${srcdir}/llvm32-${_realver}.src/projects/compiler-rt"
	rm -rf "${srcdir}/llvm32-${_realver}.src/tools/clang"

	rm -rf "${srcdir}"/llvm-build{,32}
	install -v -dm755 "${srcdir}"/llvm-build{,32}
}

build() {
	local cmake_flags_common=(-DCMAKE_INSTALL_PREFIX=/usr
		-DCMAKE_BUILD_TYPE=Release
		-DCOMPILER_RT_SANITIZERS_TO_BUILD="none"
		-DCOMPILER_RT_USE_LIBCXX=ON
		-DLIBCXX_ENABLE_STATIC=OFF
		-DLIBCXX_INCLUDE_DOCS=OFF
		-DLIBCXX_INCLUDE_TESTS=OFF
		-DLIBCXX_USE_COMPILER_RT=ON
		-DLIBCXXABI_ENABLE_ASSERTIONS=OFF
		-DLIBCXXABI_ENABLE_STATIC=OFF
		-DLIBCXXABI_ENABLE_STATIC_UNWINDER=ON
		-DLIBCXXABI_INCLUDE_TESTS=OFF
		-DLIBCXXABI_USE_COMPILER_RT=ON
		-DLIBCXXABI_USE_LLVM_UNWINDER=ON
		-DLIBOMP_INSTALL_ALIASES=OFF
		-DLIBUNWIND_ENABLE_ASSERTIONS=OFF
		-DLIBUNWIND_ENABLE_SHARED=OFF
		-DLIBUNWIND_USE_COMPILER_RT=ON
		-DSANITIZER_CXX_ABI="libc++"
		-DLLVM_BUILD_LLVM_DYLIB=ON
		-DLLVM_ENABLE_ASSERTIONS=OFF
		-DLLVM_ENABLE_DOXYGEN=OFF
		-DLLVM_ENABLE_EH=ON
		-DLLVM_ENABLE_FFI=ON
		-DLLVM_ENABLE_LIBCXX=ON
		-DLLVM_ENABLE_RTTI=ON
		-DLLVM_INCLUDE_EXAMPLES=OFF
		-DLLVM_INCLUDE_TESTS=OFF
		-DLLVM_INSTALL_UTILS=ON
		-DLLVM_LINK_LLVM_DYLIB=ON
		-DLLVM_TARGETS_TO_BUILD="AMDGPU;X86"
		-DLLVM_BINUTILS_INCDIR=/usr/include
		-DLLVM_BUILD_DOCS=OFF
		-DLLVM_ENABLE_SPHINX=OFF
		-DLLVM_INCLUDE_DOCS=OFF)

	cd "${srcdir}/llvm-build"

	cmake "${cmake_flags_common[@]}" \
		-DFFI_INCLUDE_DIR=$(pkg-config --variable=includedir libffi) \
		"${srcdir}/llvm-${_realver}.src"

	cd "${srcdir}/llvm-build32"

	export PKG_CONFIG_PATH=/usr/lib32/pkgconfig

	cmake "${cmake_flags_common[@]}" \
		-DLLVM_BUILD_32_BITS=ON \
		-DLLVM_LIBDIR_SUFFIX=32 \
		-DFFI_INCLUDE_DIR=$(pkg-config --variable=includedir libffi) \
		-DFFI_LIBRARY_PATH="/usr/lib32/libffi.so" \
		"${srcdir}/llvm32-${_realver}.src"

	cd "${srcdir}"

	make -C "${srcdir}/llvm-build/projects"
	make -C "${srcdir}/llvm-build32/projects"

	clang -g -O2 -fno-stack-protector -fpic -c "${srcdir}/crtbegin-x86_64.S" -o "${srcdir}/crtbegin-x86_64.o"
	clang -m32 -g -O2 -fno-stack-protector -fpic -c "${srcdir}/crtbegin-i386.S" -o "${srcdir}/crtbegin-i386.o"

	clang -g -O2 -fno-stack-protector -fpic -DSHARED -c "${srcdir}/crtbegin-x86_64.S" -o "${srcdir}/crtbeginS-x86_64.o"
	clang -m32 -g -O2 -fno-stack-protector -fpic -DSHARED -c "${srcdir}/crtbegin-i386.S" -o "${srcdir}/crtbeginS-i386.o"

	clang -g -O2 -fno-stack-protector -fpic -c "${srcdir}/crtend-x86_64.S" -o "${srcdir}/crtend-x86_64.o"
	clang -m32 -g -O2 -fno-stack-protector -fpic -c "${srcdir}/crtend-i386.S" -o "${srcdir}/crtend-i386.o"

	clang -g -O2 -fno-stack-protector -fpic -c "${srcdir}/crtfastmath-x86_64.c" -o "${srcdir}/crtfastmath-x86_64.o"
	clang -m32 -g -O2 -fno-stack-protector -fpic -c "${srcdir}/crtfastmath-i386.c" -o "${srcdir}/crtfastmath-i386.o"
}

package_compiler-rt() {
	pkgdesc="C language family frontend for LLVM (compiler builtins)"

	make -C "${srcdir}/llvm-build/projects" install DESTDIR="${pkgdir}"
	make -C "${srcdir}/llvm-build32/projects" install DESTDIR="${pkgdir}"

	sed -i "s#-lunwind#AS_NEEDED( /usr/lib/clang/${_fullver}/x86_64/libcompiler-rt.a )#g;s#INPUT#GROUP#g" "${pkgdir}/usr/lib/libc++.so"
	sed -i "s#-lunwind#AS_NEEDED( /usr/lib/clang/${_fullver}/i386/libcompiler-rt.a )#g;s#INPUT#GROUP#g" "${pkgdir}/usr/lib32/libc++.so"

	for ll in i386 x86_64
	do
		install -v -dm755 "${pkgdir}/usr/lib/clang/${_fullver}/${ll}"

		cp -v "${srcdir}/crtbegin-${ll}.o" "${pkgdir}/usr/lib/clang/${_fullver}/${ll}/crtbegin.o"
		cp -v "${srcdir}/crtbeginS-${ll}.o" "${pkgdir}/usr/lib/clang/${_fullver}/${ll}/crtbeginS.o"
		cp -v "${srcdir}/crtend-${ll}.o" "${pkgdir}/usr/lib/clang/${_fullver}/${ll}/crtend.o"
		cp -v "${srcdir}/crtfastmath-${ll}.o" "${pkgdir}/usr/lib/clang/${_fullver}/${ll}/crtfastmath.o"

		ln -sfv crtbegin.o "${pkgdir}/usr/lib/clang/${_fullver}/${ll}/crtbeginT.o"
		ln -sfv crtend.o "${pkgdir}/usr/lib/clang/${_fullver}/${ll}/crtendS.o"

		mv -v "${pkgdir}/usr/lib/clang/${_fullver}/lib/linux/libclang_rt.builtins-${ll}.a" \
			"${pkgdir}/usr/lib/clang/${_fullver}/${ll}"

cat > "${pkgdir}/usr/lib/clang/${_fullver}/${ll}/libcompiler-rt.a" << EOF
INPUT ( /usr/lib/clang/${_fullver}/${ll}/libclang_rt.builtins-${ll}.a AS_NEEDED ( /usr/lib/clang/${_fullver}/${ll}/libunwind-clang.a -lpthread -ldl -lm ) )
EOF

		ln -sfv ../../${ll}/libcompiler-rt.a "${pkgdir}/usr/lib/clang/${_fullver}/lib/linux/libclang_rt.builtins-${ll}.a"
	done

	mv -v "${pkgdir}/usr/lib/libunwind.a" "${pkgdir}/usr/lib/clang/${_fullver}/x86_64/libunwind-clang.a"
	mv -v "${pkgdir}/usr/lib32/libunwind.a" "${pkgdir}/usr/lib/clang/${_fullver}/i386/libunwind-clang.a"

	rm -rf "${pkgdir}"/usr/lib/*.so.*
	rm -rf "${pkgdir}"/usr/lib/libomp*.so

	rm -rf "${pkgdir}"/usr/lib32/*.so.*
	rm -rf "${pkgdir}"/usr/lib32/libomp*.so
	rm -rf "${pkgdir}/usr/lib32/clang"
}


package_libcxx() {
	pkgdesc="Low Level Virtual Machine (C++ runtime libraries)"

	make -C "${srcdir}/llvm-build/projects/libcxx" install DESTDIR="${pkgdir}"
	make -C "${srcdir}/llvm-build/projects/libcxxabi" install DESTDIR="${pkgdir}"

	rm -rf "${pkgdir}/usr/include"
	rm -rf "${pkgdir}"/usr/lib/*.{a,so}
}

package_lib32-libcxx() {
	pkgdesc="Low Level Virtual Machine (C++ runtime libraries) (32 bit)"

	make -C "${srcdir}/llvm-build32/projects/libcxx" install DESTDIR="${pkgdir}"
	make -C "${srcdir}/llvm-build32/projects/libcxxabi" install DESTDIR="${pkgdir}"

	rm -rf "${pkgdir}/usr/include"
	rm -rf "${pkgdir}"/usr/lib32/*.{a,so}
}

package_openmp() {
	pkgdesc="Low Level Virtual Machine (OpenMP runtime libraries)"

	make -C "${srcdir}/llvm-build/projects/openmp" install DESTDIR="${pkgdir}"
	
	rm -rf "${pkgdir}/usr/lib/clang"
}

package_lib32-openmp() {
	pkgdesc="Low Level Virtual Machine (OpenMP runtime libraries) (32 bit)"

	make -C "${srcdir}/llvm-build32/projects/openmp" install DESTDIR="${pkgdir}"

	rm -rf "${pkgdir}/usr/lib32/clang"
}

sha512sums=('1602343b451b964f5d8c2d6b0654d89384c80d45883498c5f0e2f4196168dd4a1ed2a4dadb752076020243df42ffe46cb31d82ffc145d8e5874163cbb9686a1f'
            '98e540222719716985e5d8439116e47469cb01201ea91d1da7e46cb6633da099688d9352c3b65e5c5f660cbbae353b3d79bb803fc66b3be663f2b04b1feed1c3'
            'fe9f69fe2269fa3d560ae97fdacd462f855fb0b7a5f647f5b8595206ff7febca6496725adc953de411a827c761e2b3ca11a2149f25707d6c62af0722b68ba913'
            '2e0fcd3e78f7e15ea894e52c51351daef8e3a2aaf53b3df7497b11403d28f5269ff49a4674bacea1d565a5faa2b24502caaaeff9cd48518f0d141563d8f9cc03'
            '9ee2e6d5899529be45b2e5edc395606fa9040d25789b3da1ae0182113626e7624cbb071eae525c478293a7b371876e41614348ee5808f90f3f9c7b08837e1055'
            '8c10e986b4123b6db9f010f053d9c67786fd739d0990146c481f7eaf69ae44fdbcb99dfad9b240b369c3f93be05dfeaf0bd977685360be94e2872ddb04019380'
            '0fff071c9dbf118bc1908e433d6ce571f47a4f2dbc5bf2d843151889e3414473bb5a9c97dc0b6dc6d1bd9ab0c6e365cae625f97d1b11d5d6ae059fa5a0496cb3'
            '8bc8873bb68998a3c97cc302e69e7bc6b4ab185b51dfa7e74d804ff4643af3fd4037679990053c24cb02d8f4f631d731cacba0b2b46d265f51baf289d3b3b962'
            '9025e55af7f98018cfdfc0810f08c2dba8b813efadb8e104e0c3d54592d2c94238372a121871713dfbbd44bdd5ec6cb6b73a2325d22e133089d2951bff6255db'
            'cf4c43c0a590b4f0e63e9a6008a747524e4553034fba72a7e99626aff6c61fd2ac4073874a1b116177f77bcb0d0021c17edd5da1950c7e3421be4de0ea133b4c'
            '6619d490db49b5005d4e7a767d3cdb417f8e152557bcbf6f773a44e766943e4dbd4fc7a1be619c2350cb5f4a798c01d093f4f0d89ba9cb2705c923bcb6a8c3b4'
            'ca67607b33d6010da9b3dea1255e7d48abe489729ef36f588898c85c0220c7aba3ecc65905ff881ee51cc633411bd385392b5236e01c05cbfb689523ad8a3cf7')

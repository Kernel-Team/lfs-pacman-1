--- a/daemon/dbus/gkd-secret-change.c	2017-07-04 10:27:34.000000000 +0200
+++ b/daemon/dbus/gkd-secret-change.c	2017-09-18 20:41:49.458313726 +0200
@@ -86,11 +86,11 @@
 		label = g_strndup (data, n_data);
 	g_free (data);
 
-	text = g_strdup_printf (_("Enter the old password for the '%s' keyring"), label);
+	text = g_strdup_printf (_("Enter the old password for the “%s” keyring"), label);
 	gcr_prompt_set_message (prompt, text);
 	g_free (text);
 
-	text = g_strdup_printf (_("An application wants to change the password for the '%s' keyring. "
+	text = g_strdup_printf (_("An application wants to change the password for the “%s” keyring. "
 				  "Enter the old password for it."), label);
 	gcr_prompt_set_description (prompt, text);
 	g_free (text);
@@ -122,11 +122,11 @@
 		label = g_strndup (data, n_data);
 	g_free (data);
 
-	text = g_strdup_printf (_("Choose a new password for the '%s' keyring"), label);
+	text = g_strdup_printf (_("Choose a new password for the “%s” keyring"), label);
 	gcr_prompt_set_message (prompt, text);
 	g_free (text);
 
-	text = g_strdup_printf (_("An application wants to change the password for the '%s' keyring. "
+	text = g_strdup_printf (_("An application wants to change the password for the “%s” keyring. "
 				  "Choose the new password you want to use for it."), label);
 	gcr_prompt_set_description (prompt, text);
 	g_free (text);
--- a/daemon/dbus/gkd-secret-create.c	2017-07-04 10:27:34.000000000 +0200
+++ b/daemon/dbus/gkd-secret-create.c	2017-09-18 20:41:49.458313726 +0200
@@ -77,7 +77,7 @@
 	if (!gck_attributes_find_string (self->attributes, CKA_LABEL, &label))
 		label = g_strdup (_("Unnamed"));
 
-	text = g_strdup_printf (_("An application wants to create a new keyring called '%s'. "
+	text = g_strdup_printf (_("An application wants to create a new keyring called “%s”. "
 				  "Choose the password you want to use for it."), label);
 	g_free (label);
 
--- a/daemon/gkd-main.c	2017-07-04 10:27:34.000000000 +0200
+++ b/daemon/gkd-main.c	2017-09-18 20:44:43.908125636 +0200
@@ -1133,10 +1133,11 @@
 
 	/* Print the environment and tell the parent we're done */
 	print_environment ();
-	close (parent_wakeup_fd);
 
-	if (!run_foreground)
+	if (!run_foreground) {
+		close (parent_wakeup_fd);
 		redirect_fds_after_fork ();
+	}
 
 	g_unix_signal_add (SIGTERM, on_signal_term, loop);
 	g_unix_signal_add (SIGHUP, on_signal_term, loop);
--- a/egg/egg-armor.c	2017-07-04 10:27:34.000000000 +0200
+++ b/egg/egg-armor.c	2017-09-18 20:42:30.967532086 +0200
@@ -180,7 +180,7 @@
 	 * does not insist that we validate this line, and is more useful
 	 * for PGP messages, rather than the keys we usually see.
 	 */
-	line = memrchr (data, '\n', (pref - 1) - data);
+	line = g_strrstr_len (data, (pref - 1) - data, "\n");
 	if (line && line[1] == '=')
 		pref = line;
 
--- a/egg/egg-asn1x.h	2017-07-04 10:27:34.000000000 +0200
+++ b/egg/egg-asn1x.h	2017-09-18 20:41:05.189057994 +0200
@@ -67,7 +67,7 @@
 	EGG_ASN1X_GENERALIZED_TIME = 37,
 } EggAsn1xType;
 
-enum {
+typedef enum {
 	EGG_ASN1X_NO_STRICT = 0x01,
 } EggAsn1xFlags;
 
--- a/egg/egg-dh.c	2017-07-04 10:27:34.000000000 +0200
+++ b/egg/egg-dh.c	2017-09-18 20:43:33.438828453 +0200
@@ -311,6 +311,7 @@
 {
 	gcry_error_t gcry;
 	guchar *value;
+	gsize n_prime;
 	gsize n_value;
 	gcry_mpi_t k;
 	gint bits;
@@ -327,19 +328,25 @@
 	gcry_mpi_powm (k, peer, priv, prime);
 
 	/* Write out the secret */
-	gcry = gcry_mpi_print (GCRYMPI_FMT_USG, NULL, 0, &n_value, k);
+	gcry = gcry_mpi_print (GCRYMPI_FMT_USG, NULL, 0, &n_prime, prime);
 	g_return_val_if_fail (gcry == 0, NULL);
-	value = egg_secure_alloc (n_value);
-	gcry = gcry_mpi_print (GCRYMPI_FMT_USG, value, n_value, &n_value, k);
+	value = egg_secure_alloc (n_prime);
+	gcry = gcry_mpi_print (GCRYMPI_FMT_USG, value, n_prime, &n_value, k);
 	g_return_val_if_fail (gcry == 0, NULL);
 
+	/* Pad the secret with zero bytes to match length of prime in bytes. */
+	if (n_value < n_prime) {
+		memmove (value + (n_prime - n_value), value, n_value);
+		memset (value, 0, (n_prime - n_value));
+	}
+
 #if DEBUG_DH_SECRET
 	g_printerr ("DH SECRET: ");
 	gcry_mpi_dump (k);
 	gcry_mpi_release (k);
 #endif
 
-	*bytes = n_value;
+	*bytes = n_prime;
 
 #if DEBUG_DH_SECRET
 	gcry_mpi_scan (&k, GCRYMPI_FMT_USG, value, bytes, NULL);
--- a/pam/gkr-pam-module.c	2017-07-04 10:27:34.000000000 +0200
+++ b/pam/gkr-pam-module.c	2017-09-18 20:44:16.842015533 +0200
@@ -894,6 +894,12 @@
 			ret = start_daemon (ph, pwd, true, password);
 	}
 
+	/* Destroy the stored authtok once it has been used */
+	if (password && pam_set_data (ph, "gkr_system_authtok", NULL, NULL) != PAM_SUCCESS) {
+		syslog (GKR_LOG_ERR, "gkr-pam: error destroying the password");
+		return PAM_SERVICE_ERR;
+	}
+
 	return PAM_SUCCESS;
 }
 
--- a/pkcs11/gkm/gkm-transaction.c	2017-07-04 10:27:34.000000000 +0200
+++ b/pkcs11/gkm/gkm-transaction.c	2017-09-18 20:43:14.559742543 +0200
@@ -347,8 +347,12 @@
 				close (fd);
 				return FALSE;
 			}
+			continue;
 		}
-		n_data -= MAX (res, n_data);
+		g_assert (res <= n_data);
+
+		data += res;
+		n_data -= res;
 	}
 
 #ifdef HAVE_FSYNC
--- a/pkcs11/ssh-store/gkm-ssh-module.c	2017-07-04 10:27:34.000000000 +0200
+++ b/pkcs11/ssh-store/gkm-ssh-module.c	2017-09-18 20:43:00.379676009 +0200
@@ -49,7 +49,7 @@
 	"Gnome Keyring",
 	"1.0",
 	"1:SSH:HOME", /* Unique serial number for manufacturer */
-	CKF_TOKEN_INITIALIZED | CKF_WRITE_PROTECTED | CKF_USER_PIN_INITIALIZED,
+	CKF_TOKEN_INITIALIZED | CKF_WRITE_PROTECTED | CKF_USER_PIN_INITIALIZED | CKF_LOGIN_REQUIRED,
 	CK_EFFECTIVELY_INFINITE,
 	CK_EFFECTIVELY_INFINITE,
 	CK_EFFECTIVELY_INFINITE,
--- a/pkcs11/ssh-store/gkm-ssh-private-key.c	2017-07-04 10:27:34.000000000 +0200
+++ b/pkcs11/ssh-store/gkm-ssh-private-key.c	2017-09-18 20:41:49.458313726 +0200
@@ -338,7 +338,7 @@
 	if (res == GKM_DATA_UNRECOGNIZED) {
 		return FALSE;
 	} else if (res != GKM_DATA_SUCCESS) {
-		g_set_error_literal (error, GKM_DATA_ERROR, res, _("Couldn't parse public SSH key"));
+		g_set_error_literal (error, GKM_DATA_ERROR, res, _("Couldn’t parse public SSH key"));
 		return FALSE;
 	}
 
--- a/pkcs11/wrap-layer/gkm-wrap-prompt.c	2017-07-04 10:27:34.000000000 +0200
+++ b/pkcs11/wrap-layer/gkm-wrap-prompt.c	2017-09-18 20:41:49.458313726 +0200
@@ -618,13 +618,13 @@
 	text = _("Enter password to unlock");
 	gcr_prompt_set_message (prompt, text);
 
-	text = g_markup_printf_escaped (_("An application wants access to the keyring '%s', but it is locked"), label);
+	text = g_markup_printf_escaped (_("An application wants access to the keyring “%s”, but it is locked"), label);
 	gcr_prompt_set_description (prompt, text);
 	g_free (text);
 
 	choice = NULL;
 	if (gkm_wrap_login_is_usable ())
-		choice = _("Automatically unlock this keyring whenever I'm logged in");
+		choice = _("Automatically unlock this keyring whenever I’m logged in");
 	gcr_prompt_set_choice_label (prompt, choice);
 	gcr_prompt_set_continue_label (prompt, _("Unlock"));
 }
@@ -666,11 +666,11 @@
 	switch (klass) {
 	case CKO_PRIVATE_KEY:
 	case CKO_PUBLIC_KEY:
-		return _("Automatically unlock this key whenever I'm logged in");
+		return _("Automatically unlock this key whenever I’m logged in");
 	case CKO_CERTIFICATE:
-		return _("Automatically unlock this certificate whenever I'm logged in");
+		return _("Automatically unlock this certificate whenever I’m logged in");
 	default:
-		return _("Automatically unlock whenever I'm logged in");
+		return _("Automatically unlock whenever I’m logged in");
 	}
 }
 
@@ -681,16 +681,16 @@
 	switch (klass) {
 	case CKO_PRIVATE_KEY:
 		/* TRANSLATORS: The private key is locked */
-		return g_strdup_printf (_("An application wants access to the private key '%s', but it is locked"), label);
+		return g_strdup_printf (_("An application wants access to the private key “%s”, but it is locked"), label);
 	case CKO_CERTIFICATE:
 		/* TRANSLATORS: The certificate is locked */
-		return g_strdup_printf (_("An application wants access to the certificate '%s', but it is locked"), label);
+		return g_strdup_printf (_("An application wants access to the certificate “%s”, but it is locked"), label);
 	case CKO_PUBLIC_KEY:
 		/* TRANSLATORS: The public key is locked */
-		return g_strdup_printf (_("An application wants access to the public key '%s', but it is locked"), label);
+		return g_strdup_printf (_("An application wants access to the public key “%s”, but it is locked"), label);
 	default:
 		/* TRANSLATORS: The object '%s' is locked */
-		return g_strdup_printf (_("An application wants access to '%s', but it is locked"), label);
+		return g_strdup_printf (_("An application wants access to “%s”, but it is locked"), label);
 	}
 }
 
@@ -786,13 +786,13 @@
 	gcr_prompt_set_message (prompt, _("Enter password to unlock the certificate/key storage"));
 
 	/* TRANSLATORS: The storage is locked, and needs unlocking before the application can use it. */
-	text = g_strdup_printf (_("An application wants access to the certificate/key storage '%s', but it is locked"), label);
+	text = g_strdup_printf (_("An application wants access to the certificate/key storage “%s”, but it is locked"), label);
 	gcr_prompt_set_description (prompt, text);
 	g_free (text);
 
 	choice = NULL;
 	if (gkm_wrap_login_is_usable ())
-		choice = _("Automatically unlock whenever I'm logged in");
+		choice = _("Automatically unlock whenever I’m logged in");
 	gcr_prompt_set_choice_label (prompt, choice);
 
 	gcr_prompt_set_continue_label (prompt, _("Unlock"));
@@ -1150,13 +1150,13 @@
 	gcr_prompt_set_title (prompt, _("New Password Required"));
 	gcr_prompt_set_message (prompt, _("New password required for secure storage"));
 
-	text = g_strdup_printf (_("In order to prepare '%s' for storage of certificates or keys, a password is required"), label);
+	text = g_strdup_printf (_("In order to prepare “%s” for storage of certificates or keys, a password is required"), label);
 	gcr_prompt_set_description (prompt, text);
 	g_free (text);
 
 	choice = NULL;
 	if (gkm_wrap_login_is_usable ())
-		choice = _("Automatically unlock whenever I'm logged in");
+		choice = _("Automatically unlock whenever I’m logged in");
 	gcr_prompt_set_choice_label (prompt, choice);
 
 	gcr_prompt_set_continue_label (prompt, _("Continue"));
@@ -1268,7 +1268,7 @@
 	gcr_prompt_set_title (prompt, _("Change Password"));
 	gcr_prompt_set_message (prompt, _("Original password for secure storage"));
 
-	text = g_strdup_printf (_("To change the password for '%s', the original password is required"), label);
+	text = g_strdup_printf (_("To change the password for “%s”, the original password is required"), label);
 	gcr_prompt_set_description (prompt, text);
 	g_free (text);
 
@@ -1299,13 +1299,13 @@
 	gcr_prompt_set_title (prompt, _("Change Password"));
 	gcr_prompt_set_message (prompt, _("Change password for secure storage"));
 
-	text = g_strdup_printf (_("Type a new password for '%s'"), label);
+	text = g_strdup_printf (_("Type a new password for “%s”"), label);
 	gcr_prompt_set_description (prompt, text);
 	g_free (text);
 
 	choice = NULL;
 	if (gkm_wrap_login_is_usable ())
-		choice = _("Automatically unlock whenever I'm logged in");
+		choice = _("Automatically unlock whenever I’m logged in");
 
 	gcr_prompt_set_continue_label (prompt, _("Continue"));
 	gcr_prompt_set_choice_label (prompt, choice);
--- a/pkcs11/wrap-layer/test-login-auto.c	2017-07-04 10:27:34.000000000 +0200
+++ b/pkcs11/wrap-layer/test-login-auto.c	2017-09-18 20:42:08.693417279 +0200
@@ -139,7 +139,7 @@
 
 	/* Login with prompt */
 	gcr_mock_prompter_expect_password_ok ("booo",
-	                                      "choice-label", "Automatically unlock this key whenever I'm logged in",
+	                                      "choice-label", "Automatically unlock this key whenever I’m logged in",
 	                                      "choice-chosen", TRUE,
 	                                      NULL);
 
@@ -177,7 +177,7 @@
 
 	/* Login with prompt */
 	gcr_mock_prompter_expect_password_ok ("booo",
-	                                      "choice-label", "Automatically unlock whenever I'm logged in",
+	                                      "choice-label", "Automatically unlock whenever I’m logged in",
 	                                      "choice-chosen", TRUE,
 	                                      NULL);
 
@@ -219,7 +219,7 @@
 
 	/* Create credential with prompt */
 	gcr_mock_prompter_expect_password_ok ("booo",
-	                                      "choice-label", "Automatically unlock this keyring whenever I'm logged in",
+	                                      "choice-label", "Automatically unlock this keyring whenever I’m logged in",
 	                                      "choice-chosen", TRUE,
 	                                      NULL);
 

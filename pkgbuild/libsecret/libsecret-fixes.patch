--- a/build/tap-driver	2014-09-23 09:49:21.000000000 +0200
+++ b/build/tap-driver	2017-09-18 20:48:11.109850146 +0200
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 
 # Copyright (C) 2013 Red Hat, Inc.
 #
@@ -102,7 +102,7 @@
             proc = subprocess.Popen(self.argv, close_fds=True,
                                     stdout=subprocess.PIPE,
                                     stderr=subprocess.PIPE)
-        except OSError, ex:
+        except OSError as ex:
             self.report_error("Couldn't run %s: %s" % (self.argv[0], str(ex)))
             return
 
@@ -112,13 +112,13 @@
         while len(rset) > 0:
             ret = select.select(rset, [], [], 10)
             if outf in ret[0]:
-                data = os.read(outf, 1024)
+                data = os.read(outf, 1024).decode("utf-8")
                 if data == "":
                     rset.remove(outf)
                 self.log.write(data)
                 self.process(data)
             if errf in ret[0]:
-                data = os.read(errf, 1024)
+                data = os.read(errf, 1024).decode("utf-8")
                 if data == "":
                     rset.remove(errf)
                 self.log.write(data)
--- a/build/tap-gtester	2014-09-23 09:49:21.000000000 +0200
+++ b/build/tap-gtester	2017-09-18 20:48:11.110850149 +0200
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 
 # Copyright (C) 2014 Red Hat, Inc.
 #
@@ -42,7 +42,7 @@
 
     def process(self, proc):
         while True:
-            line = proc.stdout.readline()
+            line = proc.stdout.readline().decode("utf-8")
             if not line:
                 break
             self.input(line)
@@ -75,27 +75,27 @@
                self.test_num += 1
            elif cmd == "result":
                if data == "OK":
-                   print "ok %d %s" % (self.test_num, self.test_name)
+                   print("ok %d %s" % (self.test_num, self.test_name))
                if data == "FAIL":
-                   print "not ok %d %s", (self.test_num, self.test_name)
+                   print("not ok %d %s", (self.test_num, self.test_name))
                self.test_name = None
            elif cmd == "skipping":
                if "/subprocess" not in data:
-                   print "ok %d # skip -- %s" % (self.test_num, data)
+                   print("ok %d # skip -- %s" % (self.test_num, data))
                self.test_name = None
            elif data:
-               print "# %s: %s" % (cmd, data)
+               print("# %s: %s" % (cmd, data))
            else:
-               print "# %s" % cmd
+               print("# %s" % cmd)
         elif line.startswith("(MSG: "):
-            print "# %s" % line[6:-1]
+            print("# %s" % line[6:-1])
         elif line:
-            print "# %s" % line
+            print("# %s" % line)
         sys.stdout.flush()
 
     def run(self, proc, output=""):
         # Complete retrieval of the list of tests
-        output += proc.stdout.read()
+        output += proc.stdout.read().decode("utf-8")
         proc.wait()
         if proc.returncode:
             sys.stderr.write("tap-gtester: listing GTest tests failed: %d\n" % proc.returncode)
@@ -105,10 +105,10 @@
             if line.startswith("/"):
                 self.test_remaining.append(line.strip())
         if not self.test_remaining:
-            print "Bail out! No tests found in GTest: %s" % self.command[0]
+            print("Bail out! No tests found in GTest: %s" % self.command[0])
             return 0
 
-        print "1..%d" % len(self.test_remaining)
+        print("1..%d" % len(self.test_remaining))
 
         # First try to run all the tests in a batch
         proc = subprocess.Popen(self.command + ["--verbose" ], close_fds=True, stdout=subprocess.PIPE)
@@ -120,7 +120,7 @@
         while True:
             # Assume that the last test failed
             if self.test_name:
-                print "not ok %d %s" % (self.test_num, self.test_name)
+                print("not ok %d %s" % (self.test_num, self.test_name))
                 self.test_name = None
 
             # Run any tests which didn't get run
@@ -156,7 +156,7 @@
     if format in ["auto", "gtest"]:
         list_cmd = cmd + ["-l", "--verbose"]
         proc = subprocess.Popen(list_cmd, close_fds=True, stdout=subprocess.PIPE)
-        output = proc.stdout.readline()
+        output = proc.stdout.readline().decode("utf-8")
         # Smell whether we're dealing with GTest list output from first line
         if "random seed" in output or "GTest" in output or output.startswith("/"):
             format = "gtest"
--- a/build/tap-unittest	2014-09-23 09:49:21.000000000 +0200
+++ b/build/tap-unittest	2017-09-18 20:48:11.110850149 +0200
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 
 #
 # This is a TAP compiler for python unittest
--- a/egg/egg-dh.c	2014-09-23 09:49:21.000000000 +0200
+++ b/egg/egg-dh.c	2017-09-18 20:49:06.223018566 +0200
@@ -314,6 +314,7 @@
 {
 	gcry_error_t gcry;
 	guchar *value;
+	gsize n_prime;
 	gsize n_value;
 	gcry_mpi_t k;
 	gint bits;
@@ -330,19 +331,25 @@
 	gcry_mpi_powm (k, peer, priv, prime);
 
 	/* Write out the secret */
-	gcry = gcry_mpi_print (GCRYMPI_FMT_USG, NULL, 0, &n_value, k);
+	gcry = gcry_mpi_print (GCRYMPI_FMT_USG, NULL, 0, &n_prime, prime);
 	g_return_val_if_fail (gcry == 0, NULL);
-	value = egg_secure_alloc (n_value);
-	gcry = gcry_mpi_print (GCRYMPI_FMT_USG, value, n_value, &n_value, k);
+	value = egg_secure_alloc (n_prime);
+	gcry = gcry_mpi_print (GCRYMPI_FMT_USG, value, n_prime, &n_value, k);
 	g_return_val_if_fail (gcry == 0, NULL);
 
+	/* Pad the secret with zero bytes to match length of prime in bytes. */
+	if (n_value < n_prime) {
+		memmove (value + (n_prime - n_value), value, n_value);
+		memset (value, 0, (n_prime - n_value));
+	}
+
 #if DEBUG_DH_SECRET
 	g_printerr ("DH SECRET: ");
 	gcry_mpi_dump (k);
 #endif
 	gcry_mpi_release (k);
 
-	*bytes = n_value;
+	*bytes = n_prime;
 
 #if DEBUG_DH_SECRET
 	gcry_mpi_scan (&k, GCRYMPI_FMT_USG, value, bytes, NULL);
--- a/libsecret/secret-collection.c	2015-10-19 12:15:02.000000000 +0200
+++ b/libsecret/secret-collection.c	2017-09-18 20:48:46.148958062 +0200
@@ -2220,31 +2220,26 @@
 
 	collection_path = secret_service_read_alias_dbus_path_sync (service, alias,
 	                                                            cancellable, error);
+	 /* No collection for this alias */
 	if (collection_path == NULL)
 		return NULL;
 
-	/* No collection for this alias */
-	if (collection_path == NULL) {
-		collection = NULL;
+	collection = _secret_service_find_collection_instance (service,
+	                                                       collection_path);
 
-	} else {
-		collection = _secret_service_find_collection_instance (service,
-		                                                       collection_path);
-
-		if (collection != NULL) {
+	if (collection != NULL) {
 
-			/* Have a collection with all necessary flags */
-			if (!collection_ensure_for_flags_sync (collection, flags,
-			                                       cancellable, error)) {
-				g_object_unref (collection);
-				collection = NULL;
-			}
-
-		/* No collection loaded, but valid path, load */
-		} else {
-			collection = secret_collection_new_for_dbus_path_sync (service, collection_path,
-			                                                       flags, cancellable, error);
+		/* Have a collection with all necessary flags */
+		if (!collection_ensure_for_flags_sync (collection, flags,
+		                                       cancellable, error)) {
+			g_object_unref (collection);
+			collection = NULL;
 		}
+
+	/* No collection loaded, but valid path, load */
+	} else {
+		collection = secret_collection_new_for_dbus_path_sync (service, collection_path,
+		                                                       flags, cancellable, error);
 	}
 
 	g_free (collection_path);
--- a/libsecret/secret-methods.c	2014-09-23 09:49:21.000000000 +0200
+++ b/libsecret/secret-methods.c	2017-09-18 20:49:23.587070194 +0200
@@ -51,7 +51,7 @@
 search_closure_free (gpointer data)
 {
 	SearchClosure *closure = data;
-	g_object_unref (closure->service);
+	g_clear_object (&closure->service);
 	g_clear_object (&closure->cancellable);
 	g_hash_table_unref (closure->items);
 	g_variant_unref (closure->attributes);
--- a/libsecret/test-py-clear.py	2014-09-23 09:49:21.000000000 +0200
+++ b/libsecret/test-py-clear.py	2017-09-18 20:47:58.162809457 +0200
@@ -14,6 +14,10 @@
 import sys
 import unittest
 
+import gi
+gi.require_version('MockService', '0')
+gi.require_version('Secret', '1')
+
 from gi.repository import MockService as Mock
 from gi.repository import Secret, GLib
 
--- a/libsecret/test-py-lookup.py	2014-09-23 09:49:21.000000000 +0200
+++ b/libsecret/test-py-lookup.py	2017-09-18 20:47:58.162809457 +0200
@@ -13,6 +13,10 @@
 
 import unittest
 
+import gi
+gi.require_version('MockService', '0')
+gi.require_version('Secret', '1')
+
 from gi.repository import MockService as Mock
 from gi.repository import Secret, GLib
 
--- a/libsecret/test-py-store.py	2014-09-23 09:49:21.000000000 +0200
+++ b/libsecret/test-py-store.py	2017-09-18 20:47:58.162809457 +0200
@@ -13,6 +13,10 @@
 
 import unittest
 
+import gi
+gi.require_version('MockService', '0')
+gi.require_version('Secret', '1')
+
 from gi.repository import MockService as Mock
 from gi.repository import Secret, GLib
 

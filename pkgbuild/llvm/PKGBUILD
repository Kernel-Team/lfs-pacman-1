pkgbase=llvm
pkgname=('llvm' 'lib32-llvm' 'llvm-libs' 'lib32-llvm-libs' 'clang' 'clang-tools-extra' 'lld' 'lldb')
_realver=6.0.1
_fullver=${_realver/rc*/}
_pre_release=0
pkgver=${_realver/rc/.rc}
pkgrel=1
arch=('x86_64')
url="http://www.llvm.org/"
license=('custom')
#depends=()

if [ "${_pre_release}" -eq "1" ]
then
	_url="http://prereleases.llvm.org/${pkgver/.rc/\/rc}"
else
	_url="http://releases.llvm.org/${pkgver}"
fi

source=("${_url}/llvm-${_realver}.src.tar.xz"
	"${_url}/cfe-${_realver}.src.tar.xz"
	"${_url}/compiler-rt-${_realver}.src.tar.xz"
	"${_url}/libcxx-${_realver}.src.tar.xz"
	"${_url}/libcxxabi-${_realver}.src.tar.xz"
	"${_url}/libunwind-${_realver}.src.tar.xz"
	"${_url}/lld-${_realver}.src.tar.xz"
	"${_url}/lldb-${_realver}.src.tar.xz"
	"${_url}/openmp-${_realver}.src.tar.xz"
	"${_url}/polly-${_realver}.src.tar.xz"
	"${_url}/clang-tools-extra-${_realver}.src.tar.xz"
	"crtbegin-i386.S::http://ftp.netbsd.org/pub/NetBSD/NetBSD-current/src/lib/csu/arch/i386/crtbegin.S"
	"crtbegin-x86_64.S::http://ftp.netbsd.org/pub/NetBSD/NetBSD-current/src/lib/csu/arch/x86_64/crtbegin.S"
	"crtend-i386.S::http://ftp.netbsd.org/pub/NetBSD/NetBSD-current/src/lib/csu/arch/i386/crtend.S"
	"crtend-x86_64.S::http://ftp.netbsd.org/pub/NetBSD/NetBSD-current/src/lib/csu/arch/x86_64/crtend.S"
	"crtfastmath.c"
	"clang-runtime.patch"
	"llvm-config.h")

prepare() {
	cp "${srcdir}/crtfastmath.c" "${srcdir}/crtfastmath-i386.c"
	cp "${srcdir}/crtfastmath.c" "${srcdir}/crtfastmath-x86_64.c"

	sed -i "/asm.h/d;/RCSID/d" "${srcdir}"/crtbegin-{i386,x86_64}.S
	sed -i "/asm.h/d;/RCSID/d" "${srcdir}"/crtend-{i386,x86_64}.S

	cd "${srcdir}/cfe-${_realver}.src"

	patch -Np1 -i "${srcdir}/clang-runtime.patch"

	rm -rf "${srcdir}/cfe-${_realver}.src/tools/extra"

	mv -v "${srcdir}/clang-tools-extra-${_realver}.src" "${srcdir}/cfe-${_realver}.src/tools/extra"

	cd "${srcdir}/openmp-${_realver}.src"

	sed -i "/OpenMPTesting/d;/construct_check_openmp_target/d" CMakeLists.txt
	sed -i "/add_openmp_testsuite/d" runtime/test/CMakeLists.txt
	sed -i "/add_subdirectory(test)/d" libomptarget/CMakeLists.txt

	rm -rf "${srcdir}"/llvm-${_realver}.src/projects/{compiler-rt,libcxx,libcxxabi,libunwind,openmp}

	mv -v "${srcdir}/compiler-rt-${_realver}.src" "${srcdir}/llvm-${_realver}.src/projects/compiler-rt"
	mv -v "${srcdir}/libcxx-${_realver}.src" "${srcdir}/llvm-${_realver}.src/projects/libcxx"
	mv -v "${srcdir}/libcxxabi-${_realver}.src" "${srcdir}/llvm-${_realver}.src/projects/libcxxabi"
	mv -v "${srcdir}/libunwind-${_realver}.src" "${srcdir}/llvm-${_realver}.src/projects/libunwind"
	mv -v "${srcdir}/openmp-${_realver}.src" "${srcdir}/llvm-${_realver}.src/projects/openmp"

	rm -rf "${srcdir}"/llvm-${_realver}.src/tools/{clang,lld,lldb,polly}

	mv -v "${srcdir}/cfe-${_realver}.src" "${srcdir}/llvm-${_realver}.src/tools/clang"
	mv -v "${srcdir}/polly-${_realver}.src" "${srcdir}/llvm-${_realver}.src/tools/polly"
	mv -v "${srcdir}/lld-${_realver}.src" "${srcdir}/llvm-${_realver}.src/tools/lld"
	mv -v "${srcdir}/lldb-${_realver}.src" "${srcdir}/llvm-${_realver}.src/tools/lldb"

	rm -rf "${srcdir}/llvm32-${_realver}.src"
	cp -a "${srcdir}"/llvm{,32}-${_realver}.src

	rm -rf "${srcdir}/llvm32-${_realver}.src/projects/compiler-rt"
	rm -rf "${srcdir}/llvm32-${_realver}.src/tools/clang"
	rm -rf "${srcdir}"/llvm32-${_realver}.src/tools/{lld,lldb}

	rm -rf "${srcdir}"/llvm-build{,32}
	install -v -dm755 "${srcdir}"/llvm-build{,32}
}

build() {
	local cmake_flags_common=(-DCMAKE_INSTALL_PREFIX=/usr
		-DCMAKE_BUILD_TYPE=Release
		-DCLANG_DEFAULT_CXX_STDLIB=libc++
		-DCLANG_DEFAULT_OPENMP_RUNTIME=libomp
		-DCLANG_DEFAULT_RTLIB=compiler-rt
		-DCLANG_INCLUDE_DOCS=OFF
		-DCLANG_INCLUDE_TESTS=OFF
		-DCLANG_TOOLS_EXTRA_INCLUDE_DOCS=OFF
		-DLIBCXX_ENABLE_STATIC=OFF
		-DLIBCXX_INCLUDE_DOCS=OFF
		-DLIBCXX_INCLUDE_TESTS=OFF
		-DLIBCXX_USE_COMPILER_RT=ON
		-DLIBCXXABI_ENABLE_ASSERTIONS=OFF
		-DLIBCXXABI_ENABLE_STATIC=OFF
		-DLIBCXXABI_ENABLE_STATIC_UNWINDER=ON
		-DLIBCXXABI_INCLUDE_TESTS=OFF
		-DLIBCXXABI_USE_COMPILER_RT=ON
		-DLIBCXXABI_USE_LLVM_UNWINDER=ON
		-DLIBOMP_INSTALL_ALIASES=OFF
		-DLIBUNWIND_ENABLE_ASSERTIONS=OFF
		-DLIBUNWIND_ENABLE_SHARED=OFF
		-DLIBUNWIND_USE_COMPILER_RT=ON
		-DLLDB_USE_SYSTEM_SIX=ON
		-DSANITIZER_CXX_ABI="libc++"
		-DLLVM_BUILD_LLVM_DYLIB=ON
		-DLLVM_ENABLE_ASSERTIONS=OFF
		-DLLVM_ENABLE_DOXYGEN=OFF
		-DLLVM_ENABLE_EH=ON
		-DLLVM_ENABLE_FFI=ON
		-DLLVM_ENABLE_LIBCXX=ON
		-DLLVM_ENABLE_RTTI=ON
		-DLLVM_INCLUDE_EXAMPLES=OFF
		-DLLVM_INCLUDE_TESTS=OFF
		-DLLVM_INSTALL_UTILS=ON
		-DLLVM_LINK_LLVM_DYLIB=ON
		-DLLVM_TARGETS_TO_BUILD="AMDGPU;X86"
		-DLLVM_BINUTILS_INCDIR=/usr/include)

	cd "${srcdir}/llvm-build"

	cmake "${cmake_flags_common[@]}" \
		-DLLVM_BUILD_DOCS=ON \
		-DLLVM_ENABLE_SPHINX=ON \
		-DLLVM_INCLUDE_DOCS=ON \
		-DSPHINX_OUTPUT_HTML=OFF \
		-DSPHINX_WARNINGS_AS_ERRORS=OFF \
		-DFFI_INCLUDE_DIR=$(pkg-config --variable=includedir libffi) \
		"${srcdir}/llvm-${_realver}.src"

	cd "${srcdir}/llvm-build32"

	export PKG_CONFIG_PATH=/usr/lib32/pkgconfig

	cmake "${cmake_flags_common[@]}" \
		-DLLVM_BUILD_32_BITS=ON \
		-DLLVM_LIBDIR_SUFFIX=32 \
		-DLLVM_BUILD_DOCS=OFF \
		-DLLVM_ENABLE_SPHINX=OFF \
		-DLLVM_INCLUDE_DOCS=OFF \
		-DFFI_INCLUDE_DIR=$(pkg-config --variable=includedir libffi) \
		-DFFI_LIBRARY_PATH="/usr/lib32/libffi.so" \
		"${srcdir}/llvm32-${_realver}.src"

	cd "${srcdir}"

	make -C "${srcdir}/llvm-build"
	make -C "${srcdir}/llvm-build32"

	clang -g -O2 -fno-stack-protector -fpic -c "${srcdir}/crtbegin-x86_64.S" -o "${srcdir}/crtbegin-x86_64.o"
	clang -m32 -g -O2 -fno-stack-protector -fpic -c "${srcdir}/crtbegin-i386.S" -o "${srcdir}/crtbegin-i386.o"

	clang -g -O2 -fno-stack-protector -fpic -DSHARED -c "${srcdir}/crtbegin-x86_64.S" -o "${srcdir}/crtbeginS-x86_64.o"
	clang -m32 -g -O2 -fno-stack-protector -fpic -DSHARED -c "${srcdir}/crtbegin-i386.S" -o "${srcdir}/crtbeginS-i386.o"

	clang -g -O2 -fno-stack-protector -fpic -c "${srcdir}/crtend-x86_64.S" -o "${srcdir}/crtend-x86_64.o"
	clang -m32 -g -O2 -fno-stack-protector -fpic -c "${srcdir}/crtend-i386.S" -o "${srcdir}/crtend-i386.o"

	clang -g -O2 -fno-stack-protector -fpic -c "${srcdir}/crtfastmath-x86_64.c" -o "${srcdir}/crtfastmath-x86_64.o"
	clang -m32 -g -O2 -fno-stack-protector -fpic -c "${srcdir}/crtfastmath-i386.c" -o "${srcdir}/crtfastmath-i386.o"

	sed -i '/extra\/cmake_install.cmake/d' "${srcdir}"/llvm-build/tools/clang/tools/cmake_install.cmake
	sed -i '/\(clang\|lld\|lldb\)\/cmake_install.cmake/d' "${srcdir}"/llvm-build/tools/cmake_install.cmake

	sed -i '/\(compiler-rt\|libcxxabi\|libcxx\)\/cmake_install.cmake/d' "${srcdir}"/llvm-build{,32}/projects/cmake_install.cmake
	sed -i '/\(libunwind\|openmp\)\/cmake_install.cmake/d' "${srcdir}"/llvm-build{,32}/projects/cmake_install.cmake

	rm -rf "${srcdir}"/llvm-install{,32}
	make -C "${srcdir}/llvm-build" install DESTDIR="${srcdir}/llvm-install"
	make -C "${srcdir}/llvm-build32" install DESTDIR="${srcdir}/llvm-install32"

	rm -rf "${srcdir}"/llvm-libs-install{,32}
	for dd in libcxxabi libcxx openmp
	do
		make -C "${srcdir}/llvm-build/projects/${dd}" install DESTDIR="${srcdir}/llvm-libs-install"
		make -C "${srcdir}/llvm-build32/projects/${dd}" install DESTDIR="${srcdir}/llvm-libs-install32"
	done

	mv "${srcdir}"/llvm-install/usr/lib/libLLVM*.so "${srcdir}/llvm-libs-install/usr/lib"
	mv "${srcdir}"/llvm-install/usr/lib/libLTO.so* "${srcdir}/llvm-libs-install/usr/lib"
	mv "${srcdir}"/llvm-install/usr/lib/LLVMgold.so "${srcdir}/llvm-libs-install/usr/lib"

	mv "${srcdir}"/llvm-install32/usr/lib32/libLLVM*.so "${srcdir}/llvm-libs-install32/usr/lib32"
	mv "${srcdir}"/llvm-install32/usr/lib32/libLTO.so* "${srcdir}/llvm-libs-install32/usr/lib32"
	mv "${srcdir}"/llvm-install32/usr/lib32/LLVMgold.so "${srcdir}/llvm-libs-install32/usr/lib32"
}

package_llvm() {
	pkgdesc="Low Level Virtual Machine"

	cp -a "${srcdir}"/llvm-install/* "${pkgdir}"

	mv -v "${pkgdir}"/usr/include/llvm/Config/llvm-config{,-64}.h

	install -v -m644 "${srcdir}/llvm-config.h" "${pkgdir}/usr/include/llvm/Config/llvm-config.h"

	sed -i "s#${srcdir}/llvm-build##" "${pkgdir}/usr/lib/cmake/polly/PollyConfig.cmake"
}

package_lib32-llvm() {
	pkgdesc="Low Level Virtual Machine (32 bit)"

	cp -a "${srcdir}"/llvm-install32/* "${pkgdir}"

	mv -v "${pkgdir}/usr/bin/llvm-config" "${pkgdir}/usr/llvm-config"
	mv -v "${pkgdir}/usr/include/llvm/Config/llvm-config.h" "${pkgdir}/usr/llvm-config.h" 

	rm -rf "${pkgdir}/usr/bin" "${pkgdir}/usr/include" "${pkgdir}/usr/share"

	install -v -dm755 "${pkgdir}/usr/bin" "${pkgdir}/usr/include/llvm/Config"

	mv -v "${pkgdir}/usr/llvm-config" "${pkgdir}/usr/bin/llvm-config32"
	mv -v "${pkgdir}/usr/llvm-config.h" "${pkgdir}/usr/include/llvm/Config/llvm-config-32.h"


	sed -i "s#${srcdir}/llvm-build32##" "${pkgdir}/usr/lib32/cmake/polly/PollyConfig.cmake"
}

package_llvm-libs() {
	pkgdesc="Low Level Virtual Machine (runtime libraries)"

	cp -a "${srcdir}"/llvm-libs-install/* "${pkgdir}"

	#install -v -dm755 "${pkgdir}/usr/lib/bfd-plugins"
	#ln -sfv ../LLVMgold.so "${pkgdir}/usr/lib/bfd-plugins/LLVMgold.so"

	sed -i "s#-lunwind#AS_NEEDED( /usr/lib/clang/${_fullver}/x86_64/libcompiler-rt.a )#g;s#INPUT#GROUP#g" "${pkgdir}/usr/lib/libc++.so"
}

package_lib32-llvm-libs() {
	pkgdesc="Low Level Virtual Machine (runtime libraries) (32 bit)"

	cp -a "${srcdir}"/llvm-libs-install32/* "${pkgdir}"

	#install -v -dm755 "${pkgdir}/usr/lib32/bfd-plugins"
	#ln -sfv ../LLVMgold.so "${pkgdir}/usr/lib32/bfd-plugins/LLVMgold.so"

	sed -i "s#-lunwind#AS_NEEDED( /usr/lib/clang/${_fullver}/i386/libcompiler-rt.a )#g;s#INPUT#GROUP#g" "${pkgdir}/usr/lib32/libc++.so"

	rm -rf "${pkgdir}/usr/include"
}

package_clang() {
	pkgdesc="C language family frontend for LLVM"
	url="http://clang.llvm.org/"

	make -C "${srcdir}/llvm-build/tools/clang" install DESTDIR="${pkgdir}"
	make -C "${srcdir}/llvm-build/projects/compiler-rt" install DESTDIR="${pkgdir}"
	make -C "${srcdir}/llvm-build/projects/libunwind" install DESTDIR="${pkgdir}"
	make -C "${srcdir}/llvm-build32/projects/libunwind" install DESTDIR="${pkgdir}"

	for ll in i386 x86_64
	do
		install -v -dm755 "${pkgdir}/usr/lib/clang/${_fullver}/${ll}"

		cp -v "${srcdir}/crtbegin-${ll}.o" "${pkgdir}/usr/lib/clang/${_fullver}/${ll}/crtbegin.o"
		cp -v "${srcdir}/crtbeginS-${ll}.o" "${pkgdir}/usr/lib/clang/${_fullver}/${ll}/crtbeginS.o"
		cp -v "${srcdir}/crtend-${ll}.o" "${pkgdir}/usr/lib/clang/${_fullver}/${ll}/crtend.o"
		cp -v "${srcdir}/crtfastmath-${ll}.o" "${pkgdir}/usr/lib/clang/${_fullver}/${ll}/crtfastmath.o"

		ln -sfv crtbegin.o "${pkgdir}/usr/lib/clang/${_fullver}/${ll}/crtbeginT.o"
		ln -sfv crtend.o "${pkgdir}/usr/lib/clang/${_fullver}/${ll}/crtendS.o"

		mv -v "${pkgdir}/usr/lib/clang/${_fullver}/lib/linux/libclang_rt.builtins-${ll}.a" \
			"${pkgdir}/usr/lib/clang/${_fullver}/${ll}"

cat > "${pkgdir}/usr/lib/clang/${_fullver}/${ll}/libcompiler-rt.a" << EOF
INPUT ( /usr/lib/clang/${_fullver}/${ll}/libclang_rt.builtins-${ll}.a AS_NEEDED ( /usr/lib/clang/${_fullver}/${ll}/libunwind-clang.a -lpthread -ldl -lm ) )
EOF

		ln -sfv ../../${ll}/libcompiler-rt.a "${pkgdir}/usr/lib/clang/${_fullver}/lib/linux/libclang_rt.builtins-${ll}.a"
	done

	mv -v "${pkgdir}/usr/lib/libunwind.a" "${pkgdir}/usr/lib/clang/${_fullver}/x86_64/libunwind-clang.a"
	mv -v "${pkgdir}/usr/lib32/libunwind.a" "${pkgdir}/usr/lib/clang/${_fullver}/i386/libunwind-clang.a"

	install -v -dm755 "${pkgdir}/usr/lib/python2.7/site-packages"
	cp -r "${srcdir}/llvm-${_realver}.src/tools/clang/bindings/python/clang" "${pkgdir}/usr/lib/python2.7/site-packages"

	python -m compileall "${pkgdir}/usr/share/scan-view"
	python -O -m compileall "${pkgdir}/usr/share/scan-view"

	python -m compileall "${pkgdir}/usr/lib/python2.7/site-packages/clang"
	python -O -m compileall "${pkgdir}/usr/lib/python2.7/site-packages/clang"
}

package_clang-tools-extra() {
	pkgdesc="Extra tools built using clang's tooling APIs"
	url="http://clang.llvm.org/"

	make -C "${srcdir}/llvm-build/tools/clang/tools/extra" install DESTDIR="${pkgdir}"
}

package_lld() {
	pkgdesc="The LLVM Linker"
	url="http://lld.llvm.org/"

	make -C "${srcdir}/llvm-build/tools/lld" install DESTDIR="${pkgdir}"
}

package_lldb() {
	pkgdesc="Next generation, high-performance debugger"
	url="http://lldb.llvm.org/"

	make -C "${srcdir}/llvm-build/tools/lldb" install DESTDIR="${pkgdir}"

	install -v -Dm644 "${srcdir}/llvm-${_realver}.src/tools/lldb/docs/lldb.1" "${pkgdir}/usr/share/man/man1/lldb.1"

	python -m compileall "${pkgdir}/usr/lib/python2.7/site-packages/lldb"
	python -O -m compileall "${pkgdir}/usr/lib/python2.7/site-packages/lldb"
}

sha512sums=('cbbb00eb99cfeb4aff623ee1a5ba075e7b5a76fc00c5f9f539ff28c108598f5708a0369d5bd92683def5a20c2fe60cab7827b42d628dbfcc79b57e0e91b84dd9'
            'f64ba9290059f6e36fee41c8f32bf483609d31c291fcd2f77d41fecfdf3c8233a5e23b93a1c73fed03683823bd6e72757ed993dd32527de3d5f2b7a64bb031b9'
            '69850c1ad92c66977fa217cbfb42a6a3f502fbe3d1a08daa7fc4cfeb617a7736d231f8ad8d93b10b1ae29bd753315d2a2d70f9ff1f4d18a9a7cc81758d91f963'
            'c04f628b0924d76f035f615b59d19ce42dfc19c9a8eea4fe2b22a95cfe5a037ebdb30943fd741443939df5b4cf692bc1e51c840fefefbd134e3afbe2a75fe875'
            'bbb4c7b412e295cb735f637df48a83093eef45ed5444f7766790b4b047f75fd5fd634d8f3a8ac33a5c1407bd16fd450ba113f60a9bcc1d0a911fe0c54e9c81f2'
            '78568c28720abdd1f8471c462421df9965e05e1db048689d16ac85378716c4080ec1723af78e9f61d133b0ff82ac8c1f0dde7fd42d194485f62c1a17c02db37f'
            '856ccc125255ab6184919f1424372f0f8a5de8477777047e2ab1a131a2ecec0caa9b5163d01409c7c510df9c794f0bc8d65cc904df2baf6462ef53bc163e002a'
            '93ee2efea07276f8838bc2b3ff039cab8c7a1a6965647aaa4dee99f55c6465d5584ed3be87b144e2e32b5acc7db9cec56d89404de764a2f53643ed154d213721'
            'abb956583e5d11d0c6f6d97183c081d658616a74933be884a591eaa3d8c4bb04f08f02016d2c86d7384c7ff1aa44fb949b0d967fc0ff50e3132aaba412e9add8'
            '1851223653f8c326ddf39f5cf9fc18a2310299769c011795d8e1a5abef2834d2c800fae318e6370547d3b6b35199ce29fe76582b64493ab8fa506aff59272539'
            'cf29d117b6dabcb7a8e5f6dab5016ce5a5c8f475679001a43fd5c935f2c368f37cdef50aae2080a1e4524f647f6d83458d4a5dec5b45d03fb374f463caf7c3f5'
            '8bc8873bb68998a3c97cc302e69e7bc6b4ab185b51dfa7e74d804ff4643af3fd4037679990053c24cb02d8f4f631d731cacba0b2b46d265f51baf289d3b3b962'
            '9025e55af7f98018cfdfc0810f08c2dba8b813efadb8e104e0c3d54592d2c94238372a121871713dfbbd44bdd5ec6cb6b73a2325d22e133089d2951bff6255db'
            'cf4c43c0a590b4f0e63e9a6008a747524e4553034fba72a7e99626aff6c61fd2ac4073874a1b116177f77bcb0d0021c17edd5da1950c7e3421be4de0ea133b4c'
            '6619d490db49b5005d4e7a767d3cdb417f8e152557bcbf6f773a44e766943e4dbd4fc7a1be619c2350cb5f4a798c01d093f4f0d89ba9cb2705c923bcb6a8c3b4'
            'ca67607b33d6010da9b3dea1255e7d48abe489729ef36f588898c85c0220c7aba3ecc65905ff881ee51cc633411bd385392b5236e01c05cbfb689523ad8a3cf7'
            'faa70eea968a421c4fbb8716326ee66ccf6e2bac36c4f405a204737cb3d12d248a63c959f515071dc9e211893e18522339ad86fb62886c975bcfea1326a2f950'
            '75e743dea28b280943b3cc7f8bbb871b57d110a7f2b9da2e6845c1c36bf170dd883fca54e463f5f49e0c3effe07fbd0db0f8cf5a12a2469d3f792af21a73fcdd')

pkgbase=llvm
pkgname=('llvm' 'lib32-llvm' 'llvm-libs' 'lib32-llvm-libs' 'clang' 'lib32-clang' 'clang-tools-extra' 'lld' 'lldb')
_realver=4.0.1
#_rcver=rc2
pkgver=${_realver} #.${_rcver}
pkgrel=1
arch=('x86_64')
url="http://www.llvm.org/"
license=('custom')
#depends=()

if [ -z "${_rcver}" ]
then

_tarver=${pkgver}

source=("http://www.llvm.org/releases/${pkgver}/llvm-${_tarver}.src.tar.xz"
	"http://www.llvm.org/releases/${pkgver}/cfe-${_tarver}.src.tar.xz"
	"http://www.llvm.org/releases/${pkgver}/compiler-rt-${_tarver}.src.tar.xz"
	"http://www.llvm.org/releases/${pkgver}/libcxx-${_tarver}.src.tar.xz"
	"http://www.llvm.org/releases/${pkgver}/libcxxabi-${_tarver}.src.tar.xz"
	"http://www.llvm.org/releases/${pkgver}/libunwind-${_tarver}.src.tar.xz"
	"http://www.llvm.org/releases/${pkgver}/lld-${_tarver}.src.tar.xz"
	"http://www.llvm.org/releases/${pkgver}/lldb-${_tarver}.src.tar.xz"
	"http://www.llvm.org/releases/${pkgver}/openmp-${_tarver}.src.tar.xz"
	"http://www.llvm.org/releases/${pkgver}/polly-${_tarver}.src.tar.xz"
	"http://www.llvm.org/releases/${pkgver}/clang-tools-extra-${_tarver}.src.tar.xz")

else

_tarver=${_realver}${_rcver}

source=("http://www.llvm.org/pre-releases/${_realver}/${_rcver}/llvm-${_tarver}.src.tar.xz"
	"http://www.llvm.org/pre-releases/${_realver}/${_rcver}/cfe-${_tarver}.src.tar.xz"
	"http://www.llvm.org/pre-releases/${_realver}/${_rcver}/compiler-rt-${_tarver}.src.tar.xz"
	"http://www.llvm.org/pre-releases/${_realver}/${_rcver}/libcxx-${_tarver}.src.tar.xz"
	"http://www.llvm.org/pre-releases/${_realver}/${_rcver}/libcxxabi-${_tarver}.src.tar.xz"
	"http://www.llvm.org/pre-releases/${_realver}/${_rcver}/libunwind-${_tarver}.src.tar.xz"
	"http://www.llvm.org/pre-releases/${_realver}/${_rcver}/lld-${_tarver}.src.tar.xz"
	"http://www.llvm.org/pre-releases/${_realver}/${_rcver}/lldb-${_tarver}.src.tar.xz"
	"http://www.llvm.org/pre-releases/${_realver}/${_rcver}/openmp-${_tarver}.src.tar.xz"
	"http://www.llvm.org/pre-releases/${_realver}/${_rcver}/polly-${_tarver}.src.tar.xz"
	"http://www.llvm.org/pre-releases/${_realver}/${_rcver}/clang-tools-extra-${_tarver}.src.tar.xz")

fi

source+=("crtbegin-i386.S::http://ftp.netbsd.org/pub/NetBSD/NetBSD-current/src/lib/csu/arch/i386/crtbegin.S"
	"crtbegin-x86_64.S::http://ftp.netbsd.org/pub/NetBSD/NetBSD-current/src/lib/csu/arch/x86_64/crtbegin.S"
	"crtend-i386.S::http://ftp.netbsd.org/pub/NetBSD/NetBSD-current/src/lib/csu/arch/i386/crtend.S"
	"crtend-x86_64.S::http://ftp.netbsd.org/pub/NetBSD/NetBSD-current/src/lib/csu/arch/x86_64/crtend.S"
	"crtfastmath.c"
	"clang-runtime.patch"
	"llvm-config.h")

prepare() {
	cp "${srcdir}/crtfastmath.c" "${srcdir}/crtfastmath-i386.c"
	cp "${srcdir}/crtfastmath.c" "${srcdir}/crtfastmath-x86_64.c"

	sed -i "/asm.h/d;/RCSID/d" "${srcdir}"/crtbegin-{i386,x86_64}.S
	sed -i "/asm.h/d;/RCSID/d" "${srcdir}"/crtend-{i386,x86_64}.S

	cd "${srcdir}/cfe-${_tarver}.src"

	patch -Np1 -i "${srcdir}/clang-runtime.patch"

	cd "${srcdir}/openmp-${_tarver}.src"

	sed -i "/LIBOMP_ALIASES/s#libgomp;##g" runtime/src/CMakeLists.txt

	cd "${srcdir}/libcxx-${_tarver}.src"

	sed -i "s:gcc_s:compiler-rt:g" cmake/config-ix.cmake lib/CMakeLists.txt

	rm -rf "${srcdir}/cfe-${_tarver}.src/tools/extra"

	mv -v "${srcdir}/clang-tools-extra-${_tarver}.src" "${srcdir}/cfe-${_tarver}.src/tools/extra"

	rm -rf "${srcdir}"/llvm-${_tarver}.src/projects/{compiler-rt,libcxx,libcxxabi,libunwind,openmp}

	mv -v "${srcdir}/compiler-rt-${_tarver}.src" "${srcdir}/llvm-${_tarver}.src/projects/compiler-rt"
	mv -v "${srcdir}/libcxx-${_tarver}.src" "${srcdir}/llvm-${_tarver}.src/projects/libcxx"
	mv -v "${srcdir}/libcxxabi-${_tarver}.src" "${srcdir}/llvm-${_tarver}.src/projects/libcxxabi"
	mv -v "${srcdir}/libunwind-${_tarver}.src" "${srcdir}/llvm-${_tarver}.src/projects/libunwind"
	mv -v "${srcdir}/openmp-${_tarver}.src" "${srcdir}/llvm-${_tarver}.src/projects/openmp"

	rm -rf "${srcdir}"/llvm-${_tarver}.src/tools/{clang,lld,lldb,polly}

	mv -v "${srcdir}/cfe-${_tarver}.src" "${srcdir}/llvm-${_tarver}.src/tools/clang"
	mv -v "${srcdir}/polly-${_tarver}.src" "${srcdir}/llvm-${_tarver}.src/tools/polly"
	mv -v "${srcdir}/lld-${_tarver}.src" "${srcdir}/llvm-${_tarver}.src/tools/lld"
	mv -v "${srcdir}/lldb-${_tarver}.src" "${srcdir}/llvm-${_tarver}.src/tools/lldb"

	rm -rf "${srcdir}/llvm32-${_tarver}.src"
	cp -a "${srcdir}"/llvm{,32}-${_tarver}.src

	rm -rf "${srcdir}/llvm32-${_tarver}.src/tools/clang/tools/extra"
	rm -rf "${srcdir}"/llvm32-${_tarver}.src/tools/{lld,lldb}

	rm -rf "${srcdir}"/llvm-build{,32}
	install -dm755 "${srcdir}"/llvm-build{,32}

}

build() {
	local cmake_flags_common=(-DCMAKE_INSTALL_PREFIX=/usr
		-DCMAKE_BUILD_TYPE=Release
		-DCLANG_DEFAULT_CXX_STDLIB=libc++
		-DCLANG_DEFAULT_OPENMP_RUNTIME=libomp
		-DCLANG_DEFAULT_RTLIB=compiler-rt
		-DCLANG_INCLUDE_TESTS=OFF
		-DCOMPILER_RT_INCLUDE_TESTS=OFF
		-DLIBCXX_ENABLE_ASSERTIONS=OFF
		-DLIBCXX_ENABLE_STATIC=OFF
		-DLIBCXX_INCLUDE_DOCS=OFF
		-DLIBCXX_INCLUDE_TESTS=OFF
		-DLIBCXXABI_ENABLE_ASSERTIONS=OFF
		-DLIBCXXABI_ENABLE_STATIC=OFF
		-DLIBCXXABI_USE_COMPILER_RT=ON
		-DLIBCXXABI_USE_LLVM_UNWINDER=ON
		-DLIBUNWIND_ENABLE_ASSERTIONS=OFF
		-DLIBUNWIND_ENABLE_SHARED=OFF
		-DLLVM_BUILD_LLVM_DYLIB=ON
		-DLLVM_BUILD_TESTS=OFF
		-DLLVM_ENABLE_DOXYGEN=OFF
		-DLLVM_ENABLE_EH=ON
		-DLLVM_ENABLE_FFI=ON
		-DLLVM_ENABLE_LIBCXX=ON
		-DLLVM_ENABLE_RTTI=ON
		-DLLVM_INCLUDE_EXAMPLES=OFF
		-DLLVM_INCLUDE_TESTS=OFF
		-DLLVM_INSTALL_UTILS=ON
		-DLLVM_LINK_LLVM_DYLIB=ON
		-DLLVM_TARGETS_TO_BUILD="AMDGPU;X86"
		-DLLVM_BINUTILS_INCDIR=/usr/include)

	cd "${srcdir}/llvm-build"

	cmake "${cmake_flags_common[@]}" \
		-DLLVM_BUILD_DOCS=ON \
		-DLLVM_ENABLE_SPHINX=ON \
		-DLLVM_INCLUDE_DOCS=ON \
		-DSPHINX_OUTPUT_HTML=OFF \
		-DSPHINX_WARNINGS_AS_ERRORS=OFF \
		-DFFI_INCLUDE_DIR=$(pkg-config --variable=includedir libffi) \
		"${srcdir}/llvm-${_tarver}.src"

	cd "${srcdir}/llvm-build32"

	export CC_HOLD="${CC}" CXX_HOLD="${CXX}"
	export CC="${CC} -m32" CXX="${CXX} -m32"
	export PKG_CONFIG_PATH=/usr/lib32/pkgconfig

	cmake "${cmake_flags_common[@]}" \
		-DLLVM_LIBDIR_SUFFIX=32 \
		-DLLVM_TARGET_ARCH=i686 \
		-DLLVM_DEFAULT_TARGET_TRIPLE=i686-pc-linux-gnu \
		-DCLANG_INCLUDE_DOCS=OFF \
		-DLLVM_BUILD_DOCS=OFF \
		-DLLVM_ENABLE_SPHINX=OFF \
		-DLLVM_INCLUDE_DOCS=OFF \
		-DFFI_INCLUDE_DIR=$(pkg-config --variable=includedir libffi) \
		-DLLVM_ENABLE_LIBCXX=OFF \
		"${srcdir}/llvm32-${_tarver}.src"

	export CC="${CC_HOLD}" CXX="${CXX_HOLD}"
	unset CC_HOLD CXX_HOLD PKG_CONFIG_PATH

	cd "${srcdir}"

	make -C "${srcdir}/llvm-build"
	make -C "${srcdir}/llvm-build32"

	clang -g -O2 -fno-stack-protector -fpic -c "${srcdir}/crtbegin-x86_64.S" -o "${srcdir}/crtbegin-x86_64.o"
	clang -m32 -g -O2 -fno-stack-protector -fpic -c "${srcdir}/crtbegin-i386.S" -o "${srcdir}/crtbegin-i386.o"

	clang -g -O2 -fno-stack-protector -fpic -DSHARED -c "${srcdir}/crtbegin-x86_64.S" -o "${srcdir}/crtbeginS-x86_64.o"
	clang -m32 -g -O2 -fno-stack-protector -fpic -DSHARED -c "${srcdir}/crtbegin-i386.S" -o "${srcdir}/crtbeginS-i386.o"

	clang -g -O2 -fno-stack-protector -fpic -c "${srcdir}/crtend-x86_64.S" -o "${srcdir}/crtend-x86_64.o"
	clang -m32 -g -O2 -fno-stack-protector -fpic -c "${srcdir}/crtend-i386.S" -o "${srcdir}/crtend-i386.o"

	clang -g -O2 -fno-stack-protector -fpic -c "${srcdir}/crtfastmath-x86_64.c" -o "${srcdir}/crtfastmath-x86_64.o"
	clang -m32 -g -O2 -fno-stack-protector -fpic -c "${srcdir}/crtfastmath-i386.c" -o "${srcdir}/crtfastmath-i386.o"

	sed -i '/extra\/cmake_install.cmake/d' "${srcdir}"/llvm-build{,32}/tools/clang/tools/cmake_install.cmake
	sed -i '/\(clang\|lld\|lldb\)\/cmake_install.cmake/d' "${srcdir}"/llvm-build{,32}/tools/cmake_install.cmake
	sed -i '/\(compiler-rt\|libcxxabi\|libcxx\)\/cmake_install.cmake/d' "${srcdir}"/llvm-build{,32}/projects/cmake_install.cmake
	sed -i '/\(libunwind\|openmp\)\/cmake_install.cmake/d' "${srcdir}"/llvm-build{,32}/projects/cmake_install.cmake

	rm -rf "${srcdir}"/llvm-install{,32}
	make -C "${srcdir}/llvm-build" install DESTDIR="${srcdir}/llvm-install"
	make -C "${srcdir}/llvm-build32" install DESTDIR="${srcdir}/llvm-install32"

	rm -rf "${srcdir}"/llvm-libs-install{,32}
	for dd in libcxxabi libcxx openmp
	do
		make -C "${srcdir}/llvm-build/projects/${dd}" install DESTDIR="${srcdir}/llvm-libs-install"
		make -C "${srcdir}/llvm-build32/projects/${dd}" install DESTDIR="${srcdir}/llvm-libs-install32"
	done

	mv "${srcdir}"/llvm-install/usr/lib/libLLVM*.so "${srcdir}/llvm-libs-install/usr/lib"
	mv "${srcdir}"/llvm-install/usr/lib/libLTO.so* "${srcdir}/llvm-libs-install/usr/lib"
	mv "${srcdir}"/llvm-install/usr/lib/LLVMgold.so "${srcdir}/llvm-libs-install/usr/lib"

	mv "${srcdir}"/llvm-install32/usr/lib32/libLLVM*.so "${srcdir}/llvm-libs-install32/usr/lib32"
	mv "${srcdir}"/llvm-install32/usr/lib32/libLTO.so* "${srcdir}/llvm-libs-install32/usr/lib32"
	mv "${srcdir}"/llvm-install32/usr/lib32/LLVMgold.so "${srcdir}/llvm-libs-install32/usr/lib32"
}

package_llvm() {
	pkgdesc="Low Level Virtual Machine"

	cp -a "${srcdir}"/llvm-install/* "${pkgdir}"

	mv -v "${pkgdir}"/usr/include/llvm/Config/llvm-config{,-64}.h

	install -v -m644 "${srcdir}/llvm-config.h" "${pkgdir}/usr/include/llvm/Config/llvm-config.h"
}

package_lib32-llvm() {
	pkgdesc="Low Level Virtual Machine (32 bit)"

	cp -a "${srcdir}"/llvm-install32/* "${pkgdir}"

	mv -v "${pkgdir}/usr/bin/llvm-config" "${pkgdir}/usr/llvm-config"
	mv -v "${pkgdir}/usr/include/llvm/Config/llvm-config.h" "${pkgdir}/usr/llvm-config.h" 

	rm -rf "${pkgdir}/usr/bin" "${pkgdir}/usr/include"

	install -v -dm755 "${pkgdir}/usr/bin" "${pkgdir}/usr/include/llvm/Config"

	mv -v "${pkgdir}/usr/llvm-config" "${pkgdir}/usr/bin/llvm-config32"
	mv -v "${pkgdir}/usr/llvm-config.h" "${pkgdir}/usr/include/llvm/Config/llvm-config-32.h"
}

package_llvm-libs() {
	pkgdesc="Low Level Virtual Machine (runtime libraries)"

	cp -a "${srcdir}"/llvm-libs-install/* "${pkgdir}"

	#install -v -dm755 "${pkgdir}/usr/lib/bfd-plugins"
	#ln -sfv ../LLVMgold.so "${pkgdir}/usr/lib/bfd-plugins/LLVMgold.so"

	sed -i "s#-lunwind#AS_NEEDED( /usr/lib/clang/${_realver}/lib/linux/x86_64/libunwind.a )#g;s#INPUT#GROUP#g" "${pkgdir}/usr/lib/libc++.so"
}

package_lib32-llvm-libs() {
	pkgdesc="Low Level Virtual Machine (runtime libraries) (32 bit)"

	cp -a "${srcdir}"/llvm-libs-install32/* "${pkgdir}"

	#install -v -dm755 "${pkgdir}/usr/lib32/bfd-plugins"
	#ln -sfv ../LLVMgold.so "${pkgdir}/usr/lib32/bfd-plugins/LLVMgold.so"

	sed -i "s#-lunwind#AS_NEEDED( /usr/lib/clang/${_realver}/lib/linux/i386/libunwind.a )#g;s#INPUT#GROUP#g" "${pkgdir}/usr/lib32/libc++.so"

	rm -rf "${pkgdir}/usr/include"
}

package_clang() {
	pkgdesc="C language family frontend for LLVM"
	url="http://clang.llvm.org/"

	make -C "${srcdir}/llvm-build/tools/clang" install DESTDIR="${pkgdir}"
	make -C "${srcdir}/llvm-build/projects/compiler-rt" install DESTDIR="${pkgdir}"
	make -C "${srcdir}/llvm-build/projects/libunwind" install DESTDIR="${pkgdir}"
	make -C "${srcdir}/llvm-build32/projects/libunwind" install DESTDIR="${pkgdir}"

	for ll in i386 x86_64
	do
		install -v -dm755 "${pkgdir}/usr/lib/clang/${_realver}/${ll}"
		install -v -dm755 "${pkgdir}/usr/lib/clang/${_realver}/lib/linux/${ll}"

		cp -v "${srcdir}/crtbegin-${ll}.o" "${pkgdir}/usr/lib/clang/${_realver}/${ll}/crtbegin.o"
		cp -v "${srcdir}/crtbeginS-${ll}.o" "${pkgdir}/usr/lib/clang/${_realver}/${ll}/crtbeginS.o"
		cp -v "${srcdir}/crtend-${ll}.o" "${pkgdir}/usr/lib/clang/${_realver}/${ll}/crtend.o"
		cp -v "${srcdir}/crtfastmath-${ll}.o" "${pkgdir}/usr/lib/clang/${_realver}/${ll}/crtfastmath.o"

		ln -sfv crtbegin.o "${pkgdir}/usr/lib/clang/${_realver}/${ll}/crtbeginT.o"
		ln -sfv crtend.o "${pkgdir}/usr/lib/clang/${_realver}/${ll}/crtendS.o"

		mv -v "${pkgdir}/usr/lib/clang/${_realver}/lib/linux/libclang_rt.builtins-${ll}.a" \
			"${pkgdir}/usr/lib/clang/${_realver}/lib/linux/${ll}"

cat > "${pkgdir}/usr/lib/clang/${_realver}/lib/linux/libclang_rt.builtins-${ll}.a" << EOF
INPUT ( /usr/lib/clang/${_realver}/lib/linux/${ll}/libclang_rt.builtins-${ll}.a AS_NEEDED ( /usr/lib/clang/${_realver}/lib/linux/${ll}/libunwind.a -lpthread -ldl -lm ) )
EOF

		ln -sfv ../lib/linux/libclang_rt.builtins-${ll}.a "${pkgdir}/usr/lib/clang/${_realver}/${ll}/libcompiler-rt.a"

	done

	mv -v "${pkgdir}/usr/lib/libunwind.a" "${pkgdir}/usr/lib/clang/${_realver}/lib/linux/x86_64"
	mv -v "${pkgdir}/usr/lib32/libunwind.a" "${pkgdir}/usr/lib/clang/${_realver}/lib/linux/i386"

	install -v -dm755 "${pkgdir}/usr/lib/python2.7/site-packages"
	cp -r "${srcdir}/llvm-${_tarver}.src/tools/clang/bindings/python/clang" "${pkgdir}/usr/lib/python2.7/site-packages"

	python -m compileall "${pkgdir}/usr/share/scan-view"
	python -O -m compileall "${pkgdir}/usr/share/scan-view"

	python -m compileall "${pkgdir}/usr/lib/python2.7/site-packages/clang"
	python -O -m compileall "${pkgdir}/usr/lib/python2.7/site-packages/clang"
}

package_lib32-clang() {
	pkgdesc="C language family frontend for LLVM (32 bit)"
	url="http://clang.llvm.org/"

	make -C "${srcdir}/llvm-build32/tools/clang" install DESTDIR="${pkgdir}"
	make -C "${srcdir}/llvm-build32/projects/compiler-rt" install DESTDIR="${pkgdir}"

	rm -rf "${pkgdir}"/usr/{bin,include,libexec,share}
}

package_clang-tools-extra() {
	pkgdesc="Extra tools built using clang's tooling APIs"
	url="http://clang.llvm.org/"

	make -C "${srcdir}/llvm-build/tools/clang/tools/extra" install DESTDIR="${pkgdir}"
}

package_lld() {
	pkgdesc="The LLVM Linker"
	url="http://lld.llvm.org/"

	make -C "${srcdir}/llvm-build/tools/lld" install DESTDIR="${pkgdir}"
}

package_lldb() {
	pkgdesc="Next generation, high-performance debugger"
	url="http://lldb.llvm.org/"

	make -C "${srcdir}/llvm-build/tools/lldb" install DESTDIR="${pkgdir}"

	install -v -Dm644 "${srcdir}/llvm-${_tarver}.src/tools/lldb/docs/lldb.1" "${pkgdir}/usr/share/man/man1/lldb.1"

	python -m compileall "${pkgdir}/usr/lib/python2.7/site-packages/lldb"
	python -O -m compileall "${pkgdir}/usr/lib/python2.7/site-packages/lldb"

	rm -rf "${pkgdir}/usr/lib/python2.7/site-packages/six.py"
}

sha512sums=('16adc39b34ddb628f81b171119a8e2a0e9138b25011e803ef0b688e2fbea116fc4953d3a1b61b90a98a75e33619f81566b7cb06a9a2ea4d04ac5e0eb303a2d1d'
            '936c9e1626b27e63a4fb11f3c0cb998eeaf9a520ad6e2bcd67cb4352e59e7781ecc700df79794f3fd70473d90b7e2ba418a39038eb0146b68e843f0705c1f964'
            'cfeb625884b273f7c0e6767b81a8d3e5f24e0b96a510d5764d9d47a0e215fc841b4cb9d1843c8fb428cd21def720cfbfe8d3593ff5bb390548ebc8c32a902649'
            '91f3f397be606989be99865d0b279557f9afb93f7a74ed10c3a74f4440e38b5694ddf452bbf2f487cacd4391606dd5c7edfe5130f2de19e2acfd6cce619d028a'
            'e94315ba8a507d8481d70c33e7ab2d724d51726edb8412c70a1b5f59e3f15d5825f1502dc2db138b20e5293fb90a184050be94d5ac270fd7ce78b502efb9f86a'
            '8a0552a8ab830010d81420f4b778a3b831bff85b19bcce972958fc30e1ba5a2fa26a3deba499985a43dd7a103690775f6a20e7b3edda55f4eaff3541002d6b59'
            '63bd0813094dc7fa9a95fdee93eb7b97026882a15548f819b5c67f3f0f9fa2a582d968af27ad8f802dbff1f6cd1b8c2fb26b3c7c80379488d05c4a4984d7af68'
            '1d94d7dfcc0614b16d0ef83436bbe814b39e34ba18394361bb9f13ad408ae9b29affa9a5d58c50c8dcd83765a39ae4d59ffabb7d8cd1358fd2fbd198b2de2ab6'
            '0b737dde832c5907a0cac41fe1d594b61e85dd405eee42b39f09233db62b44543204ccc775e52e2981f9c9f0683b234526e288a3a7a04f712280fb3a575abcaf'
            '19a2d1607fd3eba5dfc678cfa3eec1fd0bf6a548113f0d0c6a9f19bb2f1713c357ac660cbe5c6765757265d53aa2152500dd8cdc5062af253b8dac56129e3d5c'
            'ea26d926f428e62e76cf8a073e63ffe05645f6592e05d7717d5c257908870ae9217727d3e1578227b14eda5937085872463f1a8e99970256179c68b8a92e69e0'
            '8bc8873bb68998a3c97cc302e69e7bc6b4ab185b51dfa7e74d804ff4643af3fd4037679990053c24cb02d8f4f631d731cacba0b2b46d265f51baf289d3b3b962'
            '9025e55af7f98018cfdfc0810f08c2dba8b813efadb8e104e0c3d54592d2c94238372a121871713dfbbd44bdd5ec6cb6b73a2325d22e133089d2951bff6255db'
            'cf4c43c0a590b4f0e63e9a6008a747524e4553034fba72a7e99626aff6c61fd2ac4073874a1b116177f77bcb0d0021c17edd5da1950c7e3421be4de0ea133b4c'
            '6619d490db49b5005d4e7a767d3cdb417f8e152557bcbf6f773a44e766943e4dbd4fc7a1be619c2350cb5f4a798c01d093f4f0d89ba9cb2705c923bcb6a8c3b4'
            'ca67607b33d6010da9b3dea1255e7d48abe489729ef36f588898c85c0220c7aba3ecc65905ff881ee51cc633411bd385392b5236e01c05cbfb689523ad8a3cf7'
            '16b0604c4aaf9b78e77f431a0cdae8384ff98d7f372108b08f0dca3a8991afbef29ebaa928dc67eccf88ed4981873e85c8ef8b56c2296b96d6d6db53a38a6bc9'
            '75e743dea28b280943b3cc7f8bbb871b57d110a7f2b9da2e6845c1c36bf170dd883fca54e463f5f49e0c3effe07fbd0db0f8cf5a12a2469d3f792af21a73fcdd')

pkgbase=llvm
pkgname=('llvm' 'lib32-llvm' 'llvm-libs' 'lib32-llvm-libs' 'clang' 'lib32-clang' 'clang-tools-extra' 'lld' 'lldb')
_realver=5.0.1
_pre_release=0
pkgver=${_realver/rc/.rc}
pkgrel=1
arch=('x86_64')
url="http://www.llvm.org/"
license=('custom')
#depends=()

if [ "${_pre_release}" -eq "1" ]
then
	_url="http://prereleases.llvm.org/${pkgver/.rc/\/rc}"
else
	_url="http://releases.llvm.org/${pkgver}"
fi

source=("${_url}/llvm-${_realver}.src.tar.xz"
	"${_url}/cfe-${_realver}.src.tar.xz"
	"${_url}/compiler-rt-${_realver}.src.tar.xz"
	"${_url}/libcxx-${_realver}.src.tar.xz"
	"${_url}/libcxxabi-${_realver}.src.tar.xz"
	"${_url}/libunwind-${_realver}.src.tar.xz"
	"${_url}/lld-${_realver}.src.tar.xz"
	"${_url}/lldb-${_realver}.src.tar.xz"
	"${_url}/openmp-${_realver}.src.tar.xz"
	"${_url}/polly-${_realver}.src.tar.xz"
	"${_url}/clang-tools-extra-${_realver}.src.tar.xz"
	"crtbegin-i386.S::http://ftp.netbsd.org/pub/NetBSD/NetBSD-current/src/lib/csu/arch/i386/crtbegin.S"
	"crtbegin-x86_64.S::http://ftp.netbsd.org/pub/NetBSD/NetBSD-current/src/lib/csu/arch/x86_64/crtbegin.S"
	"crtend-i386.S::http://ftp.netbsd.org/pub/NetBSD/NetBSD-current/src/lib/csu/arch/i386/crtend.S"
	"crtend-x86_64.S::http://ftp.netbsd.org/pub/NetBSD/NetBSD-current/src/lib/csu/arch/x86_64/crtend.S"
	"crtfastmath.c"
	"clang-runtime.patch"
	"llvm-config.h")

prepare() {
	cp "${srcdir}/crtfastmath.c" "${srcdir}/crtfastmath-i386.c"
	cp "${srcdir}/crtfastmath.c" "${srcdir}/crtfastmath-x86_64.c"

	sed -i "/asm.h/d;/RCSID/d" "${srcdir}"/crtbegin-{i386,x86_64}.S
	sed -i "/asm.h/d;/RCSID/d" "${srcdir}"/crtend-{i386,x86_64}.S

	cd "${srcdir}/cfe-${_realver}.src"

	patch -Np1 -i "${srcdir}/clang-runtime.patch"

	rm -rf "${srcdir}/cfe-${_realver}.src/tools/extra"

	mv -v "${srcdir}/clang-tools-extra-${_realver}.src" "${srcdir}/cfe-${_realver}.src/tools/extra"

	rm -rf "${srcdir}"/llvm-${_realver}.src/projects/{compiler-rt,libcxx,libcxxabi,libunwind,openmp}

	mv -v "${srcdir}/compiler-rt-${_realver}.src" "${srcdir}/llvm-${_realver}.src/projects/compiler-rt"
	mv -v "${srcdir}/libcxx-${_realver}.src" "${srcdir}/llvm-${_realver}.src/projects/libcxx"
	mv -v "${srcdir}/libcxxabi-${_realver}.src" "${srcdir}/llvm-${_realver}.src/projects/libcxxabi"
	mv -v "${srcdir}/libunwind-${_realver}.src" "${srcdir}/llvm-${_realver}.src/projects/libunwind"
	mv -v "${srcdir}/openmp-${_realver}.src" "${srcdir}/llvm-${_realver}.src/projects/openmp"

	rm -rf "${srcdir}"/llvm-${_realver}.src/tools/{clang,lld,lldb,polly}

	mv -v "${srcdir}/cfe-${_realver}.src" "${srcdir}/llvm-${_realver}.src/tools/clang"
	mv -v "${srcdir}/polly-${_realver}.src" "${srcdir}/llvm-${_realver}.src/tools/polly"
	mv -v "${srcdir}/lld-${_realver}.src" "${srcdir}/llvm-${_realver}.src/tools/lld"
	mv -v "${srcdir}/lldb-${_realver}.src" "${srcdir}/llvm-${_realver}.src/tools/lldb"

	rm -rf "${srcdir}/llvm32-${_realver}.src"
	cp -a "${srcdir}"/llvm{,32}-${_realver}.src

	rm -rf "${srcdir}/llvm32-${_realver}.src/tools/clang/tools/extra"
	rm -rf "${srcdir}"/llvm32-${_realver}.src/tools/{lld,lldb}

	sed -i "s#{CMAKE_CXX_COMPILER}#& -m32#g" "${srcdir}"/llvm32-${_realver}.src/projects/{libcxx,libcxxabi,libunwind}/cmake/Modules/HandleCompilerRT.cmake

	rm -rf "${srcdir}"/llvm-build{,32}
	install -v -dm755 "${srcdir}"/llvm-build{,32}

}

build() {
	local cmake_flags_common=(-DCMAKE_INSTALL_PREFIX=/usr
		-DCMAKE_BUILD_TYPE=Release
		-DCLANG_DEFAULT_CXX_STDLIB=libc++
		-DCLANG_DEFAULT_OPENMP_RUNTIME=libomp
		-DCLANG_DEFAULT_RTLIB=compiler-rt
		-DCLANG_INCLUDE_DOCS=OFF
		-DCLANG_INCLUDE_TESTS=OFF
		-DLIBCXX_ENABLE_STATIC=OFF
		-DLIBCXX_INCLUDE_DOCS=OFF
		-DLIBCXX_INCLUDE_TESTS=OFF
		-DLIBCXX_USE_COMPILER_RT=ON
		-DLIBCXXABI_ENABLE_ASSERTIONS=OFF
		-DLIBCXXABI_ENABLE_STATIC=OFF
		-DLIBCXXABI_ENABLE_STATIC_UNWINDER=ON
		-DLIBCXXABI_INCLUDE_TESTS=OFF
		-DLIBCXXABI_USE_COMPILER_RT=ON
		-DLIBCXXABI_USE_LLVM_UNWINDER=ON
		-DLIBOMP_INSTALL_ALIASES=OFF
		-DLIBUNWIND_ENABLE_ASSERTIONS=OFF
		-DLIBUNWIND_ENABLE_SHARED=OFF
		-DLLVM_BUILD_LLVM_DYLIB=ON
		-DLLVM_ENABLE_ASSERTIONS=OFF
		-DLLVM_ENABLE_DOXYGEN=OFF
		-DLLVM_ENABLE_EH=ON
		-DLLVM_ENABLE_FFI=ON
		-DLLVM_ENABLE_LIBCXX=ON
		-DLLVM_ENABLE_RTTI=ON
		-DLLVM_INCLUDE_EXAMPLES=OFF
		-DLLVM_INCLUDE_TESTS=OFF
		-DLLVM_INSTALL_UTILS=ON
		-DLLVM_LINK_LLVM_DYLIB=ON
		-DLLVM_TARGETS_TO_BUILD="AMDGPU;X86"
		-DLLVM_BINUTILS_INCDIR=/usr/include)

	cd "${srcdir}/llvm-build"

	cmake "${cmake_flags_common[@]}" \
		-DLLVM_BUILD_DOCS=ON \
		-DLLVM_ENABLE_SPHINX=ON \
		-DLLVM_INCLUDE_DOCS=ON \
		-DSPHINX_OUTPUT_HTML=OFF \
		-DSPHINX_WARNINGS_AS_ERRORS=OFF \
		-DFFI_INCLUDE_DIR=$(pkg-config --variable=includedir libffi) \
		"${srcdir}/llvm-${_realver}.src"

	cd "${srcdir}/llvm-build32"

	export CC_HOLD="${CC}" CXX_HOLD="${CXX}"
	export CC="${CC} -m32" CXX="${CXX} -m32"
	export PKG_CONFIG_PATH=/usr/lib32/pkgconfig

	cmake "${cmake_flags_common[@]}" \
		-DLLVM_TARGET_ARCH=i686 \
		-DLLVM_DEFAULT_TARGET_TRIPLE=i686-pc-linux-gnu \
		-DLLVM_LIBDIR_SUFFIX=32 \
		-DCLANG_INCLUDE_DOCS=OFF \
		-DLLVM_BUILD_DOCS=OFF \
		-DLLVM_ENABLE_SPHINX=OFF \
		-DLLVM_INCLUDE_DOCS=OFF \
		-DFFI_INCLUDE_DIR=$(pkg-config --variable=includedir libffi) \
		"${srcdir}/llvm32-${_realver}.src"

	export CC="${CC_HOLD}" CXX="${CXX_HOLD}"
	unset CC_HOLD CXX_HOLD PKG_CONFIG_PATH

	cd "${srcdir}"

	make -C "${srcdir}/llvm-build"
	make -C "${srcdir}/llvm-build32"

	clang -g -O2 -fno-stack-protector -fpic -c "${srcdir}/crtbegin-x86_64.S" -o "${srcdir}/crtbegin-x86_64.o"
	clang -m32 -g -O2 -fno-stack-protector -fpic -c "${srcdir}/crtbegin-i386.S" -o "${srcdir}/crtbegin-i386.o"

	clang -g -O2 -fno-stack-protector -fpic -DSHARED -c "${srcdir}/crtbegin-x86_64.S" -o "${srcdir}/crtbeginS-x86_64.o"
	clang -m32 -g -O2 -fno-stack-protector -fpic -DSHARED -c "${srcdir}/crtbegin-i386.S" -o "${srcdir}/crtbeginS-i386.o"

	clang -g -O2 -fno-stack-protector -fpic -c "${srcdir}/crtend-x86_64.S" -o "${srcdir}/crtend-x86_64.o"
	clang -m32 -g -O2 -fno-stack-protector -fpic -c "${srcdir}/crtend-i386.S" -o "${srcdir}/crtend-i386.o"

	clang -g -O2 -fno-stack-protector -fpic -c "${srcdir}/crtfastmath-x86_64.c" -o "${srcdir}/crtfastmath-x86_64.o"
	clang -m32 -g -O2 -fno-stack-protector -fpic -c "${srcdir}/crtfastmath-i386.c" -o "${srcdir}/crtfastmath-i386.o"

	sed -i '/extra\/cmake_install.cmake/d' "${srcdir}"/llvm-build{,32}/tools/clang/tools/cmake_install.cmake
	sed -i '/\(clang\|lld\|lldb\)\/cmake_install.cmake/d' "${srcdir}"/llvm-build{,32}/tools/cmake_install.cmake
	sed -i '/\(compiler-rt\|libcxxabi\|libcxx\)\/cmake_install.cmake/d' "${srcdir}"/llvm-build{,32}/projects/cmake_install.cmake
	sed -i '/\(libunwind\|openmp\)\/cmake_install.cmake/d' "${srcdir}"/llvm-build{,32}/projects/cmake_install.cmake

	rm -rf "${srcdir}"/llvm-install{,32}
	make -C "${srcdir}/llvm-build" install DESTDIR="${srcdir}/llvm-install"
	make -C "${srcdir}/llvm-build32" install DESTDIR="${srcdir}/llvm-install32"

	rm -rf "${srcdir}"/llvm-libs-install{,32}
	for dd in libcxxabi libcxx openmp
	do
		make -C "${srcdir}/llvm-build/projects/${dd}" install DESTDIR="${srcdir}/llvm-libs-install"
		make -C "${srcdir}/llvm-build32/projects/${dd}" install DESTDIR="${srcdir}/llvm-libs-install32"
	done

	mv "${srcdir}"/llvm-install/usr/lib/libLLVM*.so "${srcdir}/llvm-libs-install/usr/lib"
	mv "${srcdir}"/llvm-install/usr/lib/libLTO.so* "${srcdir}/llvm-libs-install/usr/lib"
	mv "${srcdir}"/llvm-install/usr/lib/LLVMgold.so "${srcdir}/llvm-libs-install/usr/lib"

	mv "${srcdir}"/llvm-install32/usr/lib32/libLLVM*.so "${srcdir}/llvm-libs-install32/usr/lib32"
	mv "${srcdir}"/llvm-install32/usr/lib32/libLTO.so* "${srcdir}/llvm-libs-install32/usr/lib32"
	mv "${srcdir}"/llvm-install32/usr/lib32/LLVMgold.so "${srcdir}/llvm-libs-install32/usr/lib32"
}

package_llvm() {
	pkgdesc="Low Level Virtual Machine"

	cp -a "${srcdir}"/llvm-install/* "${pkgdir}"

	mv -v "${pkgdir}"/usr/include/llvm/Config/llvm-config{,-64}.h

	install -v -m644 "${srcdir}/llvm-config.h" "${pkgdir}/usr/include/llvm/Config/llvm-config.h"
}

package_lib32-llvm() {
	pkgdesc="Low Level Virtual Machine (32 bit)"

	cp -a "${srcdir}"/llvm-install32/* "${pkgdir}"

	mv -v "${pkgdir}/usr/bin/llvm-config" "${pkgdir}/usr/llvm-config"
	mv -v "${pkgdir}/usr/include/llvm/Config/llvm-config.h" "${pkgdir}/usr/llvm-config.h" 

	rm -rf "${pkgdir}/usr/bin" "${pkgdir}/usr/include" "${pkgdir}/usr/share"

	install -v -dm755 "${pkgdir}/usr/bin" "${pkgdir}/usr/include/llvm/Config"

	mv -v "${pkgdir}/usr/llvm-config" "${pkgdir}/usr/bin/llvm-config32"
	mv -v "${pkgdir}/usr/llvm-config.h" "${pkgdir}/usr/include/llvm/Config/llvm-config-32.h"
}

package_llvm-libs() {
	pkgdesc="Low Level Virtual Machine (runtime libraries)"

	cp -a "${srcdir}"/llvm-libs-install/* "${pkgdir}"

	#install -v -dm755 "${pkgdir}/usr/lib/bfd-plugins"
	#ln -sfv ../LLVMgold.so "${pkgdir}/usr/lib/bfd-plugins/LLVMgold.so"

	sed -i "s#-lunwind#AS_NEEDED( /usr/lib/clang/${pkgver/.rc*/}/lib/linux/x86_64/libunwind-static.a )#g;s#INPUT#GROUP#g" "${pkgdir}/usr/lib/libc++.so"
}

package_lib32-llvm-libs() {
	pkgdesc="Low Level Virtual Machine (runtime libraries) (32 bit)"

	cp -a "${srcdir}"/llvm-libs-install32/* "${pkgdir}"

	#install -v -dm755 "${pkgdir}/usr/lib32/bfd-plugins"
	#ln -sfv ../LLVMgold.so "${pkgdir}/usr/lib32/bfd-plugins/LLVMgold.so"

	sed -i "s#-lunwind#AS_NEEDED( /usr/lib/clang/${pkgver/.rc*/}/lib/linux/i386/libunwind-static.a )#g;s#INPUT#GROUP#g" "${pkgdir}/usr/lib32/libc++.so"

	rm -rf "${pkgdir}/usr/include"
}

package_clang() {
	pkgdesc="C language family frontend for LLVM"
	url="http://clang.llvm.org/"

	make -C "${srcdir}/llvm-build/tools/clang" install DESTDIR="${pkgdir}"
	make -C "${srcdir}/llvm-build/projects/compiler-rt" install DESTDIR="${pkgdir}"
	make -C "${srcdir}/llvm-build/projects/libunwind" install DESTDIR="${pkgdir}"
	make -C "${srcdir}/llvm-build32/projects/libunwind" install DESTDIR="${pkgdir}"

	for ll in i386 x86_64
	do
		install -v -dm755 "${pkgdir}/usr/lib/clang/${pkgver/.rc*/}/${ll}"
		install -v -dm755 "${pkgdir}/usr/lib/clang/${pkgver/.rc*/}/lib/linux/${ll}"

		cp -v "${srcdir}/crtbegin-${ll}.o" "${pkgdir}/usr/lib/clang/${pkgver/.rc*/}/${ll}/crtbegin.o"
		cp -v "${srcdir}/crtbeginS-${ll}.o" "${pkgdir}/usr/lib/clang/${pkgver/.rc*/}/${ll}/crtbeginS.o"
		cp -v "${srcdir}/crtend-${ll}.o" "${pkgdir}/usr/lib/clang/${pkgver/.rc*/}/${ll}/crtend.o"
		cp -v "${srcdir}/crtfastmath-${ll}.o" "${pkgdir}/usr/lib/clang/${pkgver/.rc*/}/${ll}/crtfastmath.o"

		ln -sfv crtbegin.o "${pkgdir}/usr/lib/clang/${pkgver/.rc*/}/${ll}/crtbeginT.o"
		ln -sfv crtend.o "${pkgdir}/usr/lib/clang/${pkgver/.rc*/}/${ll}/crtendS.o"

		mv -v "${pkgdir}/usr/lib/clang/${pkgver/.rc*/}/lib/linux/libclang_rt.builtins-${ll}.a" \
			"${pkgdir}/usr/lib/clang/${pkgver/.rc*/}/lib/linux/${ll}"

cat > "${pkgdir}/usr/lib/clang/${pkgver/.rc*/}/lib/linux/libclang_rt.builtins-${ll}.a" << EOF
INPUT ( /usr/lib/clang/${pkgver/.rc*/}/lib/linux/${ll}/libclang_rt.builtins-${ll}.a AS_NEEDED ( /usr/lib/clang/${pkgver/.rc*/}/lib/linux/${ll}/libunwind-static.a -lpthread -ldl -lm ) )
EOF

		ln -sfv ../lib/linux/libclang_rt.builtins-${ll}.a "${pkgdir}/usr/lib/clang/${pkgver/.rc*/}/${ll}/libcompiler-rt.a"

	done

	mv -v "${pkgdir}/usr/lib/libunwind.a" "${pkgdir}/usr/lib/clang/${pkgver/.rc*/}/lib/linux/x86_64/libunwind-static.a"
	mv -v "${pkgdir}/usr/lib32/libunwind.a" "${pkgdir}/usr/lib/clang/${pkgver/.rc*/}/lib/linux/i386/libunwind-static.a"

	install -v -dm755 "${pkgdir}/usr/lib/python2.7/site-packages"
	cp -r "${srcdir}/llvm-${_realver}.src/tools/clang/bindings/python/clang" "${pkgdir}/usr/lib/python2.7/site-packages"

	python -m compileall "${pkgdir}/usr/share/scan-view"
	python -O -m compileall "${pkgdir}/usr/share/scan-view"

	python -m compileall "${pkgdir}/usr/lib/python2.7/site-packages/clang"
	python -O -m compileall "${pkgdir}/usr/lib/python2.7/site-packages/clang"
}

package_lib32-clang() {
	pkgdesc="C language family frontend for LLVM (32 bit)"
	url="http://clang.llvm.org/"

	make -C "${srcdir}/llvm-build32/tools/clang" install DESTDIR="${pkgdir}"
	make -C "${srcdir}/llvm-build32/projects/compiler-rt" install DESTDIR="${pkgdir}"

	rm -rf "${pkgdir}"/usr/{bin,include,libexec,share}
}

package_clang-tools-extra() {
	pkgdesc="Extra tools built using clang's tooling APIs"
	url="http://clang.llvm.org/"

	make -C "${srcdir}/llvm-build/tools/clang/tools/extra" install DESTDIR="${pkgdir}"
}

package_lld() {
	pkgdesc="The LLVM Linker"
	url="http://lld.llvm.org/"

	make -C "${srcdir}/llvm-build/tools/lld" install DESTDIR="${pkgdir}"
}

package_lldb() {
	pkgdesc="Next generation, high-performance debugger"
	url="http://lldb.llvm.org/"

	make -C "${srcdir}/llvm-build/tools/lldb" install DESTDIR="${pkgdir}"

	install -v -Dm644 "${srcdir}/llvm-${_realver}.src/tools/lldb/docs/lldb.1" "${pkgdir}/usr/share/man/man1/lldb.1"

	python -m compileall "${pkgdir}/usr/lib/python2.7/site-packages/lldb"
	python -O -m compileall "${pkgdir}/usr/lib/python2.7/site-packages/lldb"

	rm -rf "${pkgdir}/usr/lib/python2.7/site-packages/six.py"
}

sha512sums=('bee1d45fca15ce725b1f2b1339b13eb6f750a3a321cfd099075477ec25835a8ca55b5366172c4aad46592dfd8afe372349ecf264f581463d017f9cee2d63c1cb'
            '6619177a2ff9934fe8b15d6aa229abb8e34d0b1a75228d9efba9393daf71d6419a7256de57b31e2f9f829f71f842118556f996e86ee076f1e0a7cd394dfd31a2'
            '61e23775db78bdeed3003a509b45ae609287db31302fed186f3210d481ecf062d1828571e63482215ab00ff732df8f3fa6c77334dfb677e4b76eb555d476b8c4'
            '994681d3c79047fc2d618c5584b08e9b5c925dab48f8812fc0adc81a575b49a637e9481bb9a0f7ae6f7f352b2b33f40056c347c27123cd6c96c6c226febd002c'
            'a8d448653772690a19f68c1270f9cf18f27d7225847825f29c6ea21846c1074aa61c31b81bc2ae4007067985d389071c32e69b2560282ddb85864a99e9bdd884'
            '6c0f7a286c1ffa46769685ee36604cd90ed40470e1c3d3ef03c46bcc9e5f9e36e68a0a1f67b9b300823170b48c9b8d2db4625afd885f1d024905db1dffd9fc49'
            '62c9682ae4e18a64af2c9e13d45925fbe022ca332d03b1c4232c6b730dab327418555c8da2b2bf8c6126032dfd378a0b9dedba83351d928784bf2b1f30dfaaca'
            'ebb3c3251098cfce28ccb6a5bbc50491a16b88d1adf3c71fd38efc95482d702e1bd9e7fb11c29597304d97cc0fd88241c70ec11276426aad901e5d23f05ca53a'
            '4493b918fd83ef26e2b3f3429d1b00d722328e4c9697ac7625a390834f6e88ada8e5b02ce0ecb4771129207b1b81a9d171f4599ab9388762a3c6db0afc499ff4'
            'ea2444cf28e07a87b202c368daeaf100477aa0189d5dda9b1e0e45784fad976bf8a45e2c87301cb3c6bc83c0c8d313c525de9b4163f1d43f00054b160d238490'
            '2e6a811cccd22281f7567f5626ff0484ed1fefee4a9244a717e3ccb9516dce9e7ff315044fb10e505e91c3f1c6d2774558debb9559915d053886599bcb153d7b'
            '8bc8873bb68998a3c97cc302e69e7bc6b4ab185b51dfa7e74d804ff4643af3fd4037679990053c24cb02d8f4f631d731cacba0b2b46d265f51baf289d3b3b962'
            '9025e55af7f98018cfdfc0810f08c2dba8b813efadb8e104e0c3d54592d2c94238372a121871713dfbbd44bdd5ec6cb6b73a2325d22e133089d2951bff6255db'
            'cf4c43c0a590b4f0e63e9a6008a747524e4553034fba72a7e99626aff6c61fd2ac4073874a1b116177f77bcb0d0021c17edd5da1950c7e3421be4de0ea133b4c'
            '6619d490db49b5005d4e7a767d3cdb417f8e152557bcbf6f773a44e766943e4dbd4fc7a1be619c2350cb5f4a798c01d093f4f0d89ba9cb2705c923bcb6a8c3b4'
            'ca67607b33d6010da9b3dea1255e7d48abe489729ef36f588898c85c0220c7aba3ecc65905ff881ee51cc633411bd385392b5236e01c05cbfb689523ad8a3cf7'
            'faa70eea968a421c4fbb8716326ee66ccf6e2bac36c4f405a204737cb3d12d248a63c959f515071dc9e211893e18522339ad86fb62886c975bcfea1326a2f950'
            '75e743dea28b280943b3cc7f8bbb871b57d110a7f2b9da2e6845c1c36bf170dd883fca54e463f5f49e0c3effe07fbd0db0f8cf5a12a2469d3f792af21a73fcdd')

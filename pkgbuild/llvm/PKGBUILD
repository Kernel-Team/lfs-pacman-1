pkgbase=llvm
pkgname=('llvm' 'lib32-llvm' 'llvm-libs' 'lib32-llvm-libs' 'clang')
_realver=9.0.1
_fullver=${_realver/rc*/}
_pre_release=0
pkgver=${_realver/rc/.rc}
pkgrel=1
arch=('x86_64')
url="http://www.llvm.org/"
license=('custom')
#depends=()

if [ "${_pre_release}" -eq "1" ]
then
	_url="https://github.com/llvm/llvm-project/releases/download/llvmorg-${pkgver}"
else
	_url="https://github.com/llvm/llvm-project/releases/download/llvmorg-${pkgver/rc/\-rc}"
fi

source=("${_url}/llvm-${_realver}.src.tar.xz"
	"${_url}/clang-${_realver}.src.tar.xz"
	"${_url}/clang-tools-extra-${_realver}.src.tar.xz"
	"clang-runtime.patch"
	"llvm-config.h")

prepare() {
	cd "${srcdir}/clang-${_realver}.src"

	patch -Np1 -i "${srcdir}/clang-runtime.patch"

	rm -rf "${srcdir}/clang-${_realver}.src/tools/extra"

	mv -v "${srcdir}/clang-tools-extra-${_realver}.src" "${srcdir}/clang-${_realver}.src/tools/extra"

	rm -rf "${srcdir}/llvm-${_realver}.src/tools/clang"

	mv -v "${srcdir}/clang-${_realver}.src" "${srcdir}/llvm-${_realver}.src/tools/clang"

	rm -rf "${srcdir}/llvm32-${_realver}.src"
	cp -a "${srcdir}"/llvm{,32}-${_realver}.src

	rm -rf "${srcdir}/llvm32-${_realver}.src/tools/clang"

	rm -rf "${srcdir}"/llvm-build{,32}
	install -v -dm755 "${srcdir}"/llvm-build{,32}
}

build() {
	local cmake_flags_common=(-DCMAKE_INSTALL_PREFIX=/usr
		-DCLANG_DEFAULT_CXX_STDLIB=libc++
		-DCLANG_DEFAULT_OPENMP_RUNTIME=libomp
		-DCLANG_DEFAULT_RTLIB=compiler-rt
		-DCLANG_INCLUDE_DOCS=OFF
		-DCLANG_INCLUDE_TESTS=OFF
		-DCLANG_TOOLS_EXTRA_INCLUDE_DOCS=OFF
		-DCMAKE_BUILD_TYPE=Release
		-DLLVM_BUILD_LLVM_DYLIB=ON
		-DLLVM_ENABLE_ASSERTIONS=OFF
		-DLLVM_ENABLE_DOXYGEN=OFF
		-DLLVM_ENABLE_EH=ON
		-DLLVM_ENABLE_FFI=ON
		-DLLVM_ENABLE_RTTI=ON
		-DLLVM_INCLUDE_EXAMPLES=OFF
		-DLLVM_INCLUDE_TESTS=OFF
		-DLLVM_INSTALL_UTILS=ON
		-DLLVM_LINK_LLVM_DYLIB=ON
		-DLLVM_TARGETS_TO_BUILD="AMDGPU;X86"
		-DLLVM_BINUTILS_INCDIR=/usr/include)

	cd "${srcdir}/llvm-build"

	cmake "${cmake_flags_common[@]}" \
		-DLLVM_BUILD_DOCS=ON \
		-DLLVM_ENABLE_SPHINX=ON \
		-DLLVM_INCLUDE_DOCS=ON \
		-DSPHINX_OUTPUT_HTML=OFF \
		-DSPHINX_WARNINGS_AS_ERRORS=OFF \
		-DFFI_INCLUDE_DIR=$(pkg-config --variable=includedir libffi) \
		"${srcdir}/llvm-${_realver}.src"

	cd "${srcdir}/llvm-build32"

	export CC_HOLD="${CC}" CXX_HOLD="${CXX}"
	export CC="${CC} -m32" CXX="${CXX} -m32"
	export PKG_CONFIG_PATH=/usr/lib32/pkgconfig

	cmake "${cmake_flags_common[@]}" \
		-DLLVM_BUILD_32_BITS=ON \
		-DLLVM_LIBDIR_SUFFIX=32 \
		-DLLVM_BUILD_DOCS=OFF \
		-DLLVM_ENABLE_SPHINX=OFF \
		-DLLVM_INCLUDE_DOCS=OFF \
		-DFFI_INCLUDE_DIR=$(pkg-config --variable=includedir libffi) \
		-DFFI_LIBRARY_PATH="/usr/lib32/libffi.so" \
		"${srcdir}/llvm32-${_realver}.src"

	export CC="${CC_HOLD}" CXX="${CXX_HOLD}"
	unset CC_HOLD CXX_HOLD PKG_CONFIG_PATH

	cd "${srcdir}"

	make -C "${srcdir}/llvm-build"
	make -C "${srcdir}/llvm-build32"
	
	sed -i '/\(clang\|lld\|lldb\)\/cmake_install.cmake/d' "${srcdir}"/llvm-build/tools/cmake_install.cmake

	rm -rf "${srcdir}"/llvm-install{,32}
	make -C "${srcdir}/llvm-build" install DESTDIR="${srcdir}/llvm-install"
	make -C "${srcdir}/llvm-build32" install DESTDIR="${srcdir}/llvm-install32"

	rm -rf "${srcdir}"/llvm-libs-install{,32}
	install -v -dm755 "${srcdir}/llvm-libs-install/usr/lib"
	install -v -dm755 "${srcdir}/llvm-libs-install32/usr/lib32"

	mv "${srcdir}"/llvm-install/usr/lib/libLLVM*.so "${srcdir}/llvm-libs-install/usr/lib"
	mv "${srcdir}"/llvm-install/usr/lib/libLTO.so* "${srcdir}/llvm-libs-install/usr/lib"
	mv "${srcdir}"/llvm-install/usr/lib/LLVMgold.so "${srcdir}/llvm-libs-install/usr/lib"

	mv "${srcdir}"/llvm-install32/usr/lib32/libLLVM*.so "${srcdir}/llvm-libs-install32/usr/lib32"
	mv "${srcdir}"/llvm-install32/usr/lib32/libLTO.so* "${srcdir}/llvm-libs-install32/usr/lib32"
	mv "${srcdir}"/llvm-install32/usr/lib32/LLVMgold.so "${srcdir}/llvm-libs-install32/usr/lib32"
}

package_llvm() {
	pkgdesc="Low Level Virtual Machine"

	cp -a "${srcdir}"/llvm-install/* "${pkgdir}"

	mv -v "${pkgdir}"/usr/include/llvm/Config/llvm-config{,-64}.h

	install -v -m644 "${srcdir}/llvm-config.h" "${pkgdir}/usr/include/llvm/Config/llvm-config.h"
}

package_lib32-llvm() {
	pkgdesc="Low Level Virtual Machine (32 bit)"

	cp -a "${srcdir}"/llvm-install32/* "${pkgdir}"

	mv -v "${pkgdir}/usr/bin/llvm-config" "${pkgdir}/usr/llvm-config"
	mv -v "${pkgdir}/usr/include/llvm/Config/llvm-config.h" "${pkgdir}/usr/llvm-config.h" 

	rm -rf "${pkgdir}/usr/bin" "${pkgdir}/usr/include" "${pkgdir}/usr/share"

	install -v -dm755 "${pkgdir}/usr/bin" "${pkgdir}/usr/include/llvm/Config"

	mv -v "${pkgdir}/usr/llvm-config" "${pkgdir}/usr/bin/llvm-config32"
	mv -v "${pkgdir}/usr/llvm-config.h" "${pkgdir}/usr/include/llvm/Config/llvm-config-32.h"
}

package_llvm-libs() {
	pkgdesc="Low Level Virtual Machine (runtime libraries)"

	cp -a "${srcdir}"/llvm-libs-install/* "${pkgdir}"

	install -v -dm755 "${pkgdir}/usr/lib/bfd-plugins"
	ln -sfv ../LLVMgold.so "${pkgdir}/usr/lib/bfd-plugins/LLVMgold.so"
}

package_lib32-llvm-libs() {
	pkgdesc="Low Level Virtual Machine (runtime libraries) (32 bit)"

	cp -a "${srcdir}"/llvm-libs-install32/* "${pkgdir}"

	install -v -dm755 "${pkgdir}/usr/lib32/bfd-plugins"
	ln -sfv ../LLVMgold.so "${pkgdir}/usr/lib32/bfd-plugins/LLVMgold.so"
}

package_clang() {
	pkgdesc="C language family frontend for LLVM"
	url="http://clang.llvm.org/"

	make -C "${srcdir}/llvm-build/tools/clang" install DESTDIR="${pkgdir}"

	install -v -dm755 "${pkgdir}/usr/lib/python2.7/site-packages"
	cp -r "${srcdir}/llvm-${_realver}.src/tools/clang/bindings/python/clang" "${pkgdir}/usr/lib/python2.7/site-packages"

	python -m compileall "${pkgdir}/usr/share/scan-view"
	python -O -m compileall "${pkgdir}/usr/share/scan-view"

	python -m compileall "${pkgdir}/usr/lib/python2.7/site-packages/clang"
	python -O -m compileall "${pkgdir}/usr/lib/python2.7/site-packages/clang"
}


sha512sums=('bfb6960a4dd1e18f4005f324f478a781c69e8ec7c20569d9b243fcb9372dc7733b254f26c683373537990cc9c109c78eaf0f65449629ee17caca1bce9b9ccccd'
            '3bcdcfd1ebb20a2cb15d57c608106b6e6e9c2eda4b781f573e84e0600b775bb7609f6df9edcf819ee5d91cc01a28ee089353c29fd57c23b867afbf6ad2f5cd13'
            '4a671596460809f314ed96b0cc0be7f2498692275d0a7bd08266f9cdf4b85fb39cb4eea4131602e9a170a75eb5d9623449960f873e25b999e06c016387a1918d'
            'a75c2e42d6565748955eb445189875d5fcff00bf99986f392ffa3b1d88bc94223dd431f67b683691c5b93ea50bd14cf5cd78df2299380803424c73bf55990983'
            '75e743dea28b280943b3cc7f8bbb871b57d110a7f2b9da2e6845c1c36bf170dd883fca54e463f5f49e0c3effe07fbd0db0f8cf5a12a2469d3f792af21a73fcdd')

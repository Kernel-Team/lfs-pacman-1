pkgbase=vulkan-loader
pkgname=('vulkan-loader' 'lib32-vulkan-loader')
pkgver=1.0.57.0
pkgrel=1
arch=('x86_64')
url="https://www.khronos.org/vulkan/"
license=('custom')
#depends=()
options=(emptydirs)
source=("git+https://github.com/KhronosGroup/Vulkan-LoaderAndValidationLayers.git#commit=db786c9" # sdk-1.0.57.0
	"git+https://github.com/KhronosGroup/glslang.git#commit=d5aedc1" # Vulkan-LoaderAndValidationLayers/external_revisions/glslang_revision
	"git+https://github.com/KhronosGroup/SPIRV-Tools.git#commit=f0fe601" # Vulkan-LoaderAndValidationLayers/external_revisions/spirv-tools_revision
	"git+https://github.com/KhronosGroup/SPIRV-Headers.git#commit=4a7a9fd") # Vulkan-LoaderAndValidationLayers/external_revisions/spirv-headers_revision

prepare() {
	cd "${srcdir}"

	rm -rf SPIRV-Tools/external/spirv-headers
	rm -rf Vulkan-LoaderAndValidationLayers/external/spirv-tools
	rm -rf Vulkan-LoaderAndValidationLayers/external/glslang

	install -v -dm755 Vulkan-LoaderAndValidationLayers/external

	mv SPIRV-Headers SPIRV-Tools/external/spirv-headers
	mv SPIRV-Tools Vulkan-LoaderAndValidationLayers/external/spirv-tools
	mv glslang Vulkan-LoaderAndValidationLayers/external/glslang
}

build_shared() {
	local builddir=${1}

	install -v -dm755 "${builddir}/external/glslang"

	cd "${builddir}/external/glslang"

	cmake -G Ninja \
		-DCMAKE_INSTALL_PREFIX=install \
		-DCMAKE_BUILD_TYPE=Release \
		"${srcdir}/Vulkan-LoaderAndValidationLayers/external/glslang"

	ninja
	ninja install

	install -v -dm755 "${builddir}/external/spirv-tools"

	cd "${builddir}/external/spirv-tools"

	cmake -G Ninja \
		-DCMAKE_INSTALL_PREFIX=install \
		-DCMAKE_BUILD_TYPE=Release \
		-DSPIRV_WERROR=OFF \
		"${srcdir}/Vulkan-LoaderAndValidationLayers/external/spirv-tools"

	ninja
	ninja install

	cd "${builddir}"

	cmake -G Ninja \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_BUILD_TYPE=Release \
		-DCMAKE_INSTALL_SYSCONFDIR=/etc \
		-DCMAKE_INSTALL_DATADIR=/share \
		-DCMAKE_SKIP_RPATH=ON \
		-DBUILD_TESTS=OFF \
		-DBUILD_WSI_XCB_SUPPORT=ON \
		-DBUILD_WSI_XLIB_SUPPORT=ON \
		-DBUILD_WSI_WAYLAND_SUPPORT=ON \
		-DBUILD_WSI_MIR_SUPPORT=OFF \
		-DCUSTOM_GLSLANG_BIN_ROOT=ON \
		-DGLSLANG_BINARY_ROOT="${PWD}/external/glslang" \
		-DCUSTOM_SPIRV_TOOLS_BIN_ROOT=ON \
		-DSPIRV_TOOLS_BINARY_ROOT="${PWD}/external/spirv-tools" \
		"${srcdir}/Vulkan-LoaderAndValidationLayers"

	ninja
}

build() {
	build_shared "${srcdir}/build64"

	export CC_HOLD="${CC}" CXX_HOLD="${CXX}"
	export CC="${CC} -m32" CXX="${CXX} -m32"
	export PKG_CONFIG_PATH=/usr/lib32/pkgconfig
	export ASFLAGS="--32"

	build_shared "${srcdir}/build32"

	export CC="${CC_HOLD}" CXX="${CXX_HOLD}"
	unset CC_HOLD CXX_HOLD PKG_CONFIG_PATH ASFLAGS
}

install_common() {
	local lib=${1}

	install -v -dm755 "${pkgdir}/usr/${lib}"

	cp -rv layers/*.so "${pkgdir}/usr/${lib}"
	cp -rv loader/*.so* "${pkgdir}/usr/${lib}"
}

package_vulkan-loader() {
	pkgdesc="Vulkan Installable Client Driver (ICD) Loader and Validation Layers"

	cd "${srcdir}/build64"

	install_common lib

	install -v -Dm755 demos/vulkaninfo "${pkgdir}/usr/bin/vulkaninfo"

	install -v -dm755 "${pkgdir}/usr/include/vulkan"

	install -v -m644 "${srcdir}"/Vulkan-LoaderAndValidationLayers/include/vulkan/*.h \
		"${pkgdir}/usr/include/vulkan"

	install -v -dm755 "${pkgdir}/usr/share/vulkan/explicit_layer.d" \
		"${pkgdir}/usr/share/vulkan/implicit_layer.d"

	for i in "${srcdir}"/Vulkan-LoaderAndValidationLayers/layers/linux/*.json
	do
		sed 's#./##' $i > "${pkgdir}/usr/share/vulkan/explicit_layer.d/$(basename $i)"
	done
}

package_lib32-vulkan-loader() {
	pkgdesc="Vulkan Installable Client Driver (ICD) Loader and Validation Layers (32 bit)"

	cd "${srcdir}/build32"

	install_common lib32

	install -v -Dm755 demos/vulkaninfo "${pkgdir}/usr/bin/vulkaninfo32"
}

sha512sums=('SKIP'
            'SKIP'
            'SKIP'
            'SKIP')
